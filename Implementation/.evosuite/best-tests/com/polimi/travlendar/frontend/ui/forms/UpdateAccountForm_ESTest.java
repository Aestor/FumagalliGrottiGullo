/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 05 21:59:12 GMT 2018
 */

package com.polimi.travlendar.frontend.ui.forms;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.polimi.travlendar.backend.beans.UserService;
import com.polimi.travlendar.backend.model.user.PreferenceLevel;
import com.polimi.travlendar.backend.model.user.User;
import com.polimi.travlendar.backend.model.user.UserSettings;
import com.polimi.travlendar.frontend.ui.forms.UpdateAccountForm;
import com.vaadin.ui.Label;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.jdbc.core.JdbcTemplate;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UpdateAccountForm_ESTest extends UpdateAccountForm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UpdateAccountForm updateAccountForm0 = new UpdateAccountForm();
      UserService userService0 = new UserService();
      JdbcTemplate jdbcTemplate0 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jdbcTemplate0).queryForObject(anyString() , any(java.lang.Object[].class) , any(org.springframework.jdbc.core.RowMapper.class));
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(updateAccountForm0, (Class<?>) UpdateAccountForm.class, "service", (Object) userService0);
      User user0 = new User();
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(updateAccountForm0, (Class<?>) UpdateAccountForm.class, "user", (Object) user0);
      Injector.validateBean(updateAccountForm0, (Class<?>) UpdateAccountForm.class);
      // Undeclared exception!
      try { 
        updateAccountForm0.init();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.travlendar.frontend.ui.forms.UpdateAccountForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UpdateAccountForm updateAccountForm0 = new UpdateAccountForm();
      UserService userService0 = new UserService();
      Label label0 = new Label("linkMove");
      JdbcTemplate jdbcTemplate0 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn(label0).when(jdbcTemplate0).queryForObject(anyString() , any(java.lang.Object[].class) , any(org.springframework.jdbc.core.RowMapper.class));
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(updateAccountForm0, (Class<?>) UpdateAccountForm.class, "service", (Object) userService0);
      User user0 = new User("Update", "eJK'==,d;IF)");
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(updateAccountForm0, (Class<?>) UpdateAccountForm.class, "user", (Object) user0);
      Injector.validateBean(updateAccountForm0, (Class<?>) UpdateAccountForm.class);
      // Undeclared exception!
      try { 
        updateAccountForm0.init();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.vaadin.ui.Label cannot be cast to com.polimi.travlendar.backend.model.user.UserSettings
         //
         verifyException("com.polimi.travlendar.backend.beans.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UpdateAccountForm updateAccountForm0 = new UpdateAccountForm();
      PreferenceLevel preferenceLevel0 = PreferenceLevel.HIGH;
      UserSettings userSettings0 = new UserSettings(preferenceLevel0, preferenceLevel0, 2549, true, true, true);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn(userSettings0).when(userService0).getPreferences(anyLong());
      Injector.inject(updateAccountForm0, (Class<?>) UpdateAccountForm.class, "service", (Object) userService0);
      User user0 = new User("KziVDpjs~NH*#", "KziVDpjs~NH*#", "KziVDpjs~NH*#", "KziVDpjs~NH*#");
      UserService userService1 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService1);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(updateAccountForm0, (Class<?>) UpdateAccountForm.class, "user", (Object) user0);
      Injector.validateBean(updateAccountForm0, (Class<?>) UpdateAccountForm.class);
      updateAccountForm0.init();
      assertTrue(updateAccountForm0.isVisible());
  }
}
