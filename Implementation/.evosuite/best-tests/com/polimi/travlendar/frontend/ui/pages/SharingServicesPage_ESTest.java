/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 05 22:28:21 GMT 2018
 */

package com.polimi.travlendar.frontend.ui.pages;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.polimi.travlendar.frontend.ui.pages.SharingServicesPage;
import com.vaadin.navigator.ViewChangeListener;
import com.vaadin.ui.Alignment;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SharingServicesPage_ESTest extends SharingServicesPage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SharingServicesPage sharingServicesPage0 = new SharingServicesPage();
      sharingServicesPage0.setDefaultComponentAlignment((Alignment) null);
      ViewChangeListener.ViewChangeEvent viewChangeListener_ViewChangeEvent0 = mock(ViewChangeListener.ViewChangeEvent.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sharingServicesPage0.enter(viewChangeListener_ViewChangeEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.vaadin.ui.AbstractOrderedLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SharingServicesPage sharingServicesPage0 = new SharingServicesPage();
      ViewChangeListener.ViewChangeEvent viewChangeListener_ViewChangeEvent0 = mock(ViewChangeListener.ViewChangeEvent.class, new ViolatedAssumptionAnswer());
      sharingServicesPage0.enter(viewChangeListener_ViewChangeEvent0);
      assertTrue(sharingServicesPage0.isVisible());
  }
}
