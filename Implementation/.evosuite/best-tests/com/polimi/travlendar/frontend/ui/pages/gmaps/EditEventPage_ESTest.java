/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 05 22:23:19 GMT 2018
 */

package com.polimi.travlendar.frontend.ui.pages.gmaps;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.polimi.travlendar.frontend.ui.forms.EventForm;
import com.polimi.travlendar.frontend.ui.pages.gmaps.EditEventPage;
import com.vaadin.navigator.ViewChangeListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EditEventPage_ESTest extends EditEventPage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EditEventPage editEventPage0 = new EditEventPage();
      EventForm eventForm0 = mock(EventForm.class, new ViolatedAssumptionAnswer());
      Injector.inject(editEventPage0, (Class<?>) EditEventPage.class, "createEvent", (Object) eventForm0);
      Injector.validateBean(editEventPage0, (Class<?>) EditEventPage.class);
      // Undeclared exception!
      try { 
        editEventPage0.enter((ViewChangeListener.ViewChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.travlendar.frontend.ui.pages.gmaps.EditEventPage", e);
      }
  }
}
