/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 04 10:43:33 GMT 2018
 */

package com.polimi.fakePTS;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.polimi.fakePTS.PtsRequest;
import com.polimi.fakePTS.tickets.Ticket;
import com.polimi.fakePTS.tickets.TicketType;
import com.polimi.fakePTS.tickets.TrainTicket;
import com.polimi.fakePTS.tickets.UrbanTicket;
import java.time.LocalDate;
import java.time.Period;
import java.time.chrono.IsoChronology;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PtsRequest_ESTest extends PtsRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TicketType ticketType0 = TicketType.YEARPASS;
      LocalDate localDate0 = MockLocalDate.now();
      try { 
        PtsRequest.buyTrainTicket((-1419), "X`DJoVy-\"pc1", "X`DJoVy-\"pc1", ticketType0, localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // error
         //
         assertThrownBy("com.polimi.fakePTS.PtsRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TicketType ticketType0 = TicketType.WEEKPASS;
      UrbanTicket urbanTicket0 = PtsRequest.buyUrbanTicket(20, ticketType0, "position-y");
      //  // Unstable assertion: assertEquals("UkqyC5HiZheLMWaL", urbanTicket0.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        PtsRequest.getUrbanPrice((TicketType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.polimi.fakePTS.PtsRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        PtsRequest.buyUrbanTicket(106, (TicketType) null, "position-y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.polimi.fakePTS.tickets.Ticket", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TicketType ticketType0 = TicketType.YEARPASS;
      // Undeclared exception!
      try { 
        PtsRequest.buyTrainTicket(250, "lambda$null$f35a4394$1", "Orio", ticketType0, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.polimi.fakePTS.PtsRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        PtsRequest.activateTicket((Ticket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.polimi.fakePTS.PtsRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TicketType ticketType0 = TicketType.ONEMONTHPASS;
      int int0 = PtsRequest.getUrbanPrice(ticketType0);
      assertEquals(35, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TicketType ticketType0 = TicketType.SINGLE;
      int int0 = PtsRequest.getUrbanPrice(ticketType0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TicketType ticketType0 = TicketType.WEEKPASS;
      int int0 = PtsRequest.getUrbanPrice(ticketType0);
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TicketType ticketType0 = TicketType.YEARPASS;
      int int0 = PtsRequest.getUrbanPrice(ticketType0);
      assertEquals(250, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TicketType ticketType0 = TicketType.ONEMONTHPASS;
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      try { 
        PtsRequest.buyTrainTicket(0, "", "", ticketType0, localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // error
         //
         assertThrownBy("com.polimi.fakePTS.PtsRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TicketType ticketType0 = TicketType.YEARPASS;
      try { 
        PtsRequest.buyUrbanTicket((-657), ticketType0, "org.atmosphere.plugin.jgroups.JGroupsBroadcaster");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // error
         //
         assertThrownBy("com.polimi.fakePTS.PtsRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TicketType ticketType0 = TicketType.SINGLE;
      LocalDate localDate0 = MockLocalDate.ofYearDay(2, 2);
      TrainTicket trainTicket0 = PtsRequest.buyTrainTicket(2, "Er{or: TicLet i1 already `alidnted", "Er{or: TicLet i1 already `alidnted", ticketType0, localDate0);
      try { 
        PtsRequest.activateTicket(trainTicket0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not activate ticket: today does not correspond with the prefixed day 
         //
         assertThrownBy("com.polimi.fakePTS.PtsRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TicketType ticketType0 = TicketType.YEARPASS;
      UrbanTicket urbanTicket0 = PtsRequest.buyUrbanTicket(1864, ticketType0, "");
      PtsRequest.activateTicket(urbanTicket0);
      try { 
        PtsRequest.activateTicket(urbanTicket0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error: Ticket is already validated
         //
         assertThrownBy("com.polimi.fakePTS.PtsRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TicketType ticketType0 = TicketType.WEEKPASS;
      Period period0 = Period.ofMonths(84);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      TrainTicket trainTicket0 = PtsRequest.buyTrainTicket(106, "2RaVC", "z", ticketType0, localDate0);
      PtsRequest.activateTicket(trainTicket0);
      //  // Unstable assertion: assertTrue(trainTicket0.isActivated());
      //  // Unstable assertion: assertEquals("HDfBQCLwEkX3hpVj", trainTicket0.getId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      List<String> list0 = PtsRequest.getAvailableCities();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = PtsRequest.getTrainPrice("eYj_YR- [+JnH(X{*", "");
      //  // Unstable assertion: assertEquals(99, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PtsRequest ptsRequest0 = new PtsRequest();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      List<String> list0 = PtsRequest.getAvailableTrainStations();
      assertEquals(6, list0.size());
  }
}
