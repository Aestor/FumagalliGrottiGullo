/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 04 11:23:15 GMT 2018
 */

package com.polimi.fakePTS.tickets;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.polimi.fakePTS.tickets.TicketType;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TicketType_ESTest extends TicketType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TicketType[] ticketTypeArray0 = TicketType.values();
      assertNotNull(ticketTypeArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TicketType ticketType0 = TicketType.valueOf("SINGLE");
      assertEquals(TicketType.SINGLE, ticketType0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TicketType ticketType0 = TicketType.valueOf("ONEMONTHPASS");
      assertEquals(2, ticketType0.ordinal());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        TicketType.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        TicketType.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.polimi.fakePTS.tickets.TicketType.
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      List<String> list0 = TicketType.getValues();
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TicketType ticketType0 = TicketType.WEEKPASS;
      String string0 = ticketType0.toString();
      assertEquals("weekpass", string0);
  }
}
