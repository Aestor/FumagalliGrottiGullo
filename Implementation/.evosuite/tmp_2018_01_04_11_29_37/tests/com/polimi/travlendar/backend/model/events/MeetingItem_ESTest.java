/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 04 11:10:49 GMT 2018
 */

package com.polimi.travlendar.backend.model.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.polimi.travlendar.backend.model.events.Meeting;
import com.polimi.travlendar.backend.model.events.MeetingItem;
import com.vaadin.ui.InlineDateTimeField;
import java.time.ZonedDateTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MeetingItem_ESTest extends MeetingItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      MeetingItem meetingItem0 = new MeetingItem(meeting0);
      Meeting.State meeting_State0 = Meeting.State.planned;
      meeting0.setState(meeting_State0);
      boolean boolean0 = meetingItem0.isResizeable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      MeetingItem meetingItem0 = new MeetingItem(meeting0);
      Meeting.State meeting_State0 = Meeting.State.planned;
      meeting0.setState(meeting_State0);
      boolean boolean0 = meetingItem0.isMoveable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      MeetingItem meetingItem0 = new MeetingItem(meeting0);
      Meeting.State meeting_State0 = Meeting.State.planned;
      meeting0.setState(meeting_State0);
      Meeting meeting1 = meetingItem0.getMeeting();
      assertNull(meeting1.getDetails());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Meeting meeting0 = new Meeting(true);
      MeetingItem meetingItem0 = new MeetingItem(meeting0);
      meeting0.setUser(460L);
      Meeting meeting1 = meetingItem0.getMeeting();
      assertSame(meeting0, meeting1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      MeetingItem meetingItem0 = new MeetingItem(meeting0);
      meeting0.setUser((-1466L));
      Meeting meeting1 = meetingItem0.getMeeting();
      assertNull(meeting1.getDetails());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      meeting0.setId(3079L);
      MeetingItem meetingItem0 = new MeetingItem(meeting0);
      Meeting meeting1 = meetingItem0.getMeeting();
      assertSame(meeting1, meeting0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      MeetingItem meetingItem0 = new MeetingItem(meeting0);
      meeting0.setId((-3419L));
      Meeting meeting1 = meetingItem0.getMeeting();
      assertNull(meeting1.getPreferenceLevel());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      MeetingItem meetingItem0 = new MeetingItem(meeting0);
      meetingItem0.setLocation("");
      String string0 = meetingItem0.getLocation();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MeetingItem meetingItem0 = null;
      try {
        meetingItem0 = new MeetingItem((Meeting) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.polimi.travlendar.backend.model.events.MeetingItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      MeetingItem meetingItem0 = new MeetingItem(meeting0);
      MeetingItem meetingItem1 = new MeetingItem(meeting0);
      boolean boolean0 = meetingItem1.equals(meetingItem0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      MeetingItem meetingItem0 = new MeetingItem(meeting0);
      boolean boolean0 = meetingItem0.equals(meetingItem0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      MeetingItem meetingItem0 = new MeetingItem(meeting0);
      InlineDateTimeField inlineDateTimeField0 = new InlineDateTimeField();
      boolean boolean0 = meetingItem0.equals(inlineDateTimeField0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      MeetingItem meetingItem0 = new MeetingItem(meeting0);
      meetingItem0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      MeetingItem meetingItem0 = new MeetingItem(meeting0);
      meetingItem0.setLocation("P]t.T");
      String string0 = meetingItem0.getLocation();
      assertEquals("P]t.T", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      MeetingItem meetingItem0 = new MeetingItem(meeting0);
      meetingItem0.setEnd((ZonedDateTime) null);
      assertFalse(meetingItem0.isAllDay());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      MeetingItem meetingItem0 = new MeetingItem(meeting0);
      String string0 = meetingItem0.getDateCaptionFormat();
      assertEquals("<span class=\"v-icon v-icon-clock\" style=\"font-family: Vaadin-Icons;\">&#xe7d2;</span> %s<br><span class=\"v-icon v-icon-arrow_circle_right_o\" style=\"font-family: Vaadin-Icons;\">&#xe6f3;</span> %s", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      MeetingItem meetingItem0 = new MeetingItem(meeting0);
      meetingItem0.setStart(zonedDateTime0);
      assertNull(meetingItem0.getDescription());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      MeetingItem meetingItem0 = new MeetingItem(meeting0);
      String string0 = meetingItem0.getLocation();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      MeetingItem meetingItem0 = new MeetingItem(meeting0);
      boolean boolean0 = meetingItem0.isResizeable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      MeetingItem meetingItem0 = new MeetingItem(meeting0);
      boolean boolean0 = meetingItem0.isMoveable();
      assertFalse(boolean0);
  }
}
