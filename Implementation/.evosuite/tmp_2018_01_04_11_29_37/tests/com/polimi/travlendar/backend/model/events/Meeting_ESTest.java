/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 04 11:21:30 GMT 2018
 */

package com.polimi.travlendar.backend.model.events;

import org.junit.Test;
import static org.junit.Assert.*;
import com.polimi.travlendar.backend.model.events.Meeting;
import com.polimi.travlendar.backend.model.user.PreferenceLevel;
import java.time.Clock;
import java.time.ZonedDateTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Meeting_ESTest extends Meeting_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Meeting meeting0 = new Meeting(true);
      boolean boolean0 = meeting0.isLongTimeEvent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Meeting meeting0 = new Meeting(true);
      boolean boolean0 = meeting0.isLongTime();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Meeting meeting0 = new Meeting(true);
      meeting0.setUser(979L);
      long long0 = meeting0.getUser();
      assertEquals(979L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Meeting meeting0 = new Meeting(true);
      meeting0.setUser((-1716L));
      long long0 = meeting0.getUser();
      assertEquals((-1716L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      Meeting.State meeting_State0 = Meeting.State.planned;
      meeting0.setState(meeting_State0);
      meeting0.getState();
      assertFalse(meeting0.isLongTimeEvent());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      Clock clock0 = MockClock.systemUTC();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(clock0);
      meeting0.setStart(zonedDateTime0);
      meeting0.getStart();
      assertFalse(meeting0.isLongTimeEvent());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      PreferenceLevel preferenceLevel0 = PreferenceLevel.HIGH;
      meeting0.setLevel(preferenceLevel0);
      meeting0.getPreferenceLevel();
      assertFalse(meeting0.isLongTime());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      PreferenceLevel preferenceLevel0 = PreferenceLevel.MEDIUM;
      meeting0.setLevel(preferenceLevel0);
      meeting0.getPreferenceLevel();
      assertFalse(meeting0.isLongTimeEvent());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      meeting0.setName("A^Vt@N;'");
      meeting0.getName();
      assertFalse(meeting0.isLongTime());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      meeting0.setName("");
      meeting0.getName();
      assertFalse(meeting0.isLongTime());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Meeting meeting0 = new Meeting(true);
      meeting0.setLocation("&4:@!TI)zsef:Oh");
      meeting0.getLocation();
      assertTrue(meeting0.isLongTimeEvent());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Meeting meeting0 = new Meeting(true);
      meeting0.setLocation("");
      meeting0.getLocation();
      assertTrue(meeting0.isLongTime());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      PreferenceLevel preferenceLevel0 = PreferenceLevel.HIGH;
      meeting0.setLevel(preferenceLevel0);
      meeting0.getLevel();
      assertFalse(meeting0.isLongTimeEvent());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Meeting meeting0 = new Meeting(true);
      meeting0.setId(404L);
      long long0 = meeting0.getId();
      assertEquals(404L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      meeting0.setId((-263L));
      long long0 = meeting0.getId();
      assertEquals((-263L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Meeting meeting0 = new Meeting(true);
      meeting0.setDetails("AvM~)f6~");
      meeting0.getDetails();
      assertTrue(meeting0.isLongTime());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      meeting0.setDetails("");
      meeting0.getDetails();
      assertFalse(meeting0.isLongTimeEvent());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      Meeting.State meeting_State0 = Meeting.State.planned;
      meeting0.setState(meeting_State0);
      boolean boolean0 = meeting0.isEditable();
      assertFalse(meeting0.isLongTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      boolean boolean0 = meeting0.isEditable();
      assertFalse(boolean0);
      assertFalse(meeting0.isLongTime());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      meeting0.getPreferenceLevel();
      assertFalse(meeting0.isLongTime());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      boolean boolean0 = meeting0.isLongTimeEvent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      meeting0.getLevel();
      assertFalse(meeting0.isLongTime());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      meeting0.getState();
      assertFalse(meeting0.isLongTime());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      meeting0.getEnd();
      assertFalse(meeting0.isLongTimeEvent());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      boolean boolean0 = meeting0.isLongTime();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      meeting0.getId();
      assertFalse(meeting0.isLongTimeEvent());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      meeting0.getStart();
      assertFalse(meeting0.isLongTime());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      PreferenceLevel preferenceLevel0 = PreferenceLevel.MEDIUM;
      meeting0.setLevel(preferenceLevel0);
      meeting0.getLevel();
      assertFalse(meeting0.isLongTimeEvent());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      meeting0.getLocation();
      assertFalse(meeting0.isLongTimeEvent());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      Meeting.State meeting_State0 = Meeting.State.ended;
      meeting0.setState(meeting_State0);
      meeting0.getState();
      assertFalse(meeting0.isLongTimeEvent());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      meeting0.setLongTime(false);
      assertFalse(meeting0.isLongTimeEvent());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      meeting0.getUser();
      assertFalse(meeting0.isLongTimeEvent());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      meeting0.getDetails();
      assertFalse(meeting0.isLongTime());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      meeting0.getName();
      assertFalse(meeting0.isLongTime());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      meeting0.setEnd(zonedDateTime0);
      meeting0.getEnd();
      assertFalse(meeting0.isLongTimeEvent());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Meeting meeting0 = new Meeting(false);
      PreferenceLevel preferenceLevel0 = PreferenceLevel.MEDIUM;
      meeting0.setPreferenceLevel(preferenceLevel0);
      assertFalse(meeting0.isLongTimeEvent());
  }
}
