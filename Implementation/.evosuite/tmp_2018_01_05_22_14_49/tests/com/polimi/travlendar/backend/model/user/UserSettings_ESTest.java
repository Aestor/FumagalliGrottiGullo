/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 05 22:24:48 GMT 2018
 */

package com.polimi.travlendar.backend.model.user;

import org.junit.Test;
import static org.junit.Assert.*;
import com.polimi.travlendar.backend.model.user.PreferenceLevel;
import com.polimi.travlendar.backend.model.user.UserSettings;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserSettings_ESTest extends UserSettings_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PreferenceLevel preferenceLevel0 = PreferenceLevel.MEDIUM;
      UserSettings userSettings0 = new UserSettings(preferenceLevel0, preferenceLevel0, 0, true, true, true);
      boolean boolean0 = userSettings0.isDrivingLicense();
      assertEquals(0, userSettings0.getMaxWalkingDistance());
      assertTrue(boolean0);
      assertTrue(userSettings0.isBikeAvailability());
      assertTrue(userSettings0.isCarAvailability());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings();
      boolean boolean0 = userSettings0.isCarAvailability();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PreferenceLevel preferenceLevel0 = PreferenceLevel.MEDIUM;
      UserSettings userSettings0 = new UserSettings(preferenceLevel0, preferenceLevel0, 0, true, true, true);
      assertTrue(userSettings0.isBikeAvailability());
      
      userSettings0.setBikeAvailability(false);
      boolean boolean0 = userSettings0.isBikeAvailability();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PreferenceLevel preferenceLevel0 = PreferenceLevel.LOW;
      UserSettings userSettings0 = new UserSettings(preferenceLevel0, preferenceLevel0, 1, false, true, false);
      int int0 = userSettings0.getMaxWalkingDistance();
      assertFalse(userSettings0.isCarAvailability());
      assertEquals(1, int0);
      assertTrue(userSettings0.isBikeAvailability());
      assertFalse(userSettings0.isDrivingLicense());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PreferenceLevel preferenceLevel0 = PreferenceLevel.HIGH;
      UserSettings userSettings0 = new UserSettings(preferenceLevel0, preferenceLevel0, (-1), false, false, true);
      int int0 = userSettings0.getMaxWalkingDistance();
      assertTrue(userSettings0.isDrivingLicense());
      assertFalse(userSettings0.isBikeAvailability());
      assertFalse(userSettings0.isCarAvailability());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PreferenceLevel preferenceLevel0 = PreferenceLevel.MEDIUM;
      UserSettings userSettings0 = new UserSettings(preferenceLevel0, preferenceLevel0, 0, true, true, true);
      userSettings0.getCarPreference();
      assertEquals(0, userSettings0.getMaxWalkingDistance());
      assertTrue(userSettings0.isBikeAvailability());
      assertTrue(userSettings0.isCarAvailability());
      assertTrue(userSettings0.isDrivingLicense());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings();
      userSettings0.getBikePreference();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PreferenceLevel preferenceLevel0 = PreferenceLevel.HIGH;
      UserSettings userSettings0 = new UserSettings(preferenceLevel0, preferenceLevel0, (-1481), false, true, false);
      PreferenceLevel preferenceLevel1 = PreferenceLevel.LOW;
      userSettings0.setBikePreference(preferenceLevel1);
      userSettings0.getBikePreference();
      assertEquals((-1481), userSettings0.getMaxWalkingDistance());
      assertFalse(userSettings0.isDrivingLicense());
      assertTrue(userSettings0.isBikeAvailability());
      assertFalse(userSettings0.isCarAvailability());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PreferenceLevel preferenceLevel0 = PreferenceLevel.MEDIUM;
      UserSettings userSettings0 = new UserSettings(preferenceLevel0, preferenceLevel0, 0, true, true, true);
      boolean boolean0 = userSettings0.isBikeAvailability();
      assertTrue(boolean0);
      assertTrue(userSettings0.isCarAvailability());
      assertEquals(0, userSettings0.getMaxWalkingDistance());
      assertTrue(userSettings0.isDrivingLicense());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PreferenceLevel preferenceLevel0 = PreferenceLevel.MEDIUM;
      UserSettings userSettings0 = new UserSettings(preferenceLevel0, preferenceLevel0, 0, true, true, true);
      boolean boolean0 = userSettings0.isCarAvailability();
      assertTrue(userSettings0.isBikeAvailability());
      assertTrue(boolean0);
      assertEquals(0, userSettings0.getMaxWalkingDistance());
      assertTrue(userSettings0.isDrivingLicense());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PreferenceLevel preferenceLevel0 = PreferenceLevel.MEDIUM;
      UserSettings userSettings0 = new UserSettings(preferenceLevel0, preferenceLevel0, 0, true, true, true);
      int int0 = userSettings0.getMaxWalkingDistance();
      assertTrue(userSettings0.isDrivingLicense());
      assertEquals(0, int0);
      assertTrue(userSettings0.isBikeAvailability());
      assertTrue(userSettings0.isCarAvailability());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PreferenceLevel preferenceLevel0 = PreferenceLevel.HIGH;
      UserSettings userSettings0 = new UserSettings(preferenceLevel0, preferenceLevel0, (-1481), false, true, false);
      userSettings0.setCarAvailability(false);
      assertTrue(userSettings0.isBikeAvailability());
      assertEquals((-1481), userSettings0.getMaxWalkingDistance());
      assertFalse(userSettings0.isDrivingLicense());
      assertFalse(userSettings0.isCarAvailability());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PreferenceLevel preferenceLevel0 = PreferenceLevel.HIGH;
      UserSettings userSettings0 = new UserSettings(preferenceLevel0, preferenceLevel0, (-1481), false, true, false);
      userSettings0.getBikePreference();
      assertFalse(userSettings0.isCarAvailability());
      assertEquals((-1481), userSettings0.getMaxWalkingDistance());
      assertTrue(userSettings0.isBikeAvailability());
      assertFalse(userSettings0.isDrivingLicense());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings();
      PreferenceLevel preferenceLevel0 = PreferenceLevel.LOW;
      userSettings0.setCarPreference(preferenceLevel0);
      PreferenceLevel preferenceLevel1 = userSettings0.getCarPreference();
      assertEquals("Low", preferenceLevel1.getPreference());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PreferenceLevel preferenceLevel0 = PreferenceLevel.MEDIUM;
      UserSettings userSettings0 = new UserSettings(preferenceLevel0, preferenceLevel0, 0, true, true, true);
      userSettings0.setDrivingLicense(true);
      assertEquals(0, userSettings0.getMaxWalkingDistance());
      assertTrue(userSettings0.isCarAvailability());
      assertTrue(userSettings0.isBikeAvailability());
      assertTrue(userSettings0.isDrivingLicense());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings();
      userSettings0.setMaxWalkingDistance(3319);
      assertEquals(3319, userSettings0.getMaxWalkingDistance());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PreferenceLevel preferenceLevel0 = PreferenceLevel.HIGH;
      UserSettings userSettings0 = new UserSettings(preferenceLevel0, preferenceLevel0, (-1481), false, true, false);
      boolean boolean0 = userSettings0.isDrivingLicense();
      assertTrue(userSettings0.isBikeAvailability());
      assertEquals((-1481), userSettings0.getMaxWalkingDistance());
      assertFalse(boolean0);
      assertFalse(userSettings0.isCarAvailability());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings();
      userSettings0.getCarPreference();
  }
}
