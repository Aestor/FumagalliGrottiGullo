/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 05 22:13:12 GMT 2018
 */

package com.polimi.travlendar.backend.model.user;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.polimi.travlendar.backend.beans.UserService;
import com.polimi.travlendar.backend.model.user.User;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class User_ESTest extends User_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Long long0 = new Long(0L);
      User user0 = new User(long0, "oCC 9q^R9", "oCC 9q^R9", (String) null, "H{CHW`$");
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      user0.setPassword((String) null);
      user0.setFirst_name((String) null);
      user0.toString();
      user0.setBalance(long0);
      user0.getSchedule();
      user0.setId(long0);
      user0.getPassword();
      user0.toString();
      user0.setId(long0);
      Long long1 = user0.getBalance();
      Long long2 = user0.getBalance();
      user0.getPassword();
      user0.setLast_name("SD<EGNO6Ye@df\"[]w");
      user0.getFirst_name();
      user0.setLast_name("User{id=0, email=oCC 9q^R9, password=null, first_name=null, last_name=H{CHW`$, balance=0, stripeId=null}");
      user0.setId(long1);
      user0.getSchedule();
      user0.toString();
      user0.setBalance(long2);
      user0.setStripeId("User{id=0, email=oCC 9q^R9, password=null, first_name=null, last_name=H{CHW`$, balance=0, stripeId=null}");
      user0.getLast_name();
      user0.setFirst_name(", last_name=");
      user0.setBalance(long1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Long long0 = new Long(0L);
      User user0 = new User(long0, (String) null, "", "", "");
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      User user1 = new User((String) null, "", "", "");
      UserService userService1 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user1, (Class<?>) User.class, "service", (Object) userService1);
      Injector.validateBean(user1, (Class<?>) User.class);
      String string0 = user0.toString();
      assertEquals("User{id=0, email=null, password=, first_name=, last_name=, balance=0, stripeId=null}", string0);
      
      user0.setPassword(", password=");
      user0.setId(long0);
      user1.setId(long0);
      assertEquals(0L, (long)user1.getBalance());
      
      user0.getEmail();
      assertEquals(0L, (long)user0.getBalance());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      User user0 = new User(", stripeId=", "");
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      User user1 = new User((String) null, (String) null);
      UserService userService1 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user1, (Class<?>) User.class, "service", (Object) userService1);
      Injector.validateBean(user1, (Class<?>) User.class);
      user0.setUser(user1);
      user0.getPassword();
      Long long0 = new Long(3196L);
      user0.setId(long0);
      user0.setEmail((String) null);
      user0.toString();
      user1.getLast_name();
      user0.getId();
      user1.toString();
      user1.setUser(user0);
      assertEquals(3196L, (long)user1.getId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      User user0 = new User("", ", first_name=");
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      user0.setLast_name(", first_name=");
      user0.setLast_name(", first_name=");
      User user1 = new User();
      UserService userService1 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user1, (Class<?>) User.class, "service", (Object) userService1);
      Injector.validateBean(user1, (Class<?>) User.class);
      user1.setBalance((Long) null);
      user0.setUser(user1);
      assertEquals("", user0.getLast_name());
      
      user0.setLast_name("");
      user0.getPassword();
      Long long0 = new Long(0L);
      user1.setId(long0);
      user0.getBalance();
      user1.setLast_name("");
      user0.getId();
      user0.getStripeId();
      user0.getStripeId();
      user0.getPassword();
      user0.toString();
      user0.setLast_name("");
      user1.toString();
      user1.setId((Long) null);
      user0.setFirst_name("");
      assertEquals((-1L), (long)user0.getId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      User user0 = new User();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      user0.setStripeId("com.polimi.travlendar.backend.model.events.MeetingItem");
      user0.getStripeId();
      User user1 = new User("KfI8{Q`S9C", "com.polimi.travlendar.backend.model.events.MeetingItem");
      UserService userService1 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user1, (Class<?>) User.class, "service", (Object) userService1);
      Injector.validateBean(user1, (Class<?>) User.class);
      user0.setUser(user1);
      Long long0 = new Long(0L);
      user0.setBalance(long0);
      assertEquals("com.polimi.travlendar.backend.model.events.MeetingItem", user0.getPassword());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      User user0 = new User();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      user0.setEmail("");
      user0.setStripeId(", balance=");
      assertEquals(0L, (long)user0.getBalance());
      
      Long long0 = new Long((-2082L));
      user0.setBalance(long0);
      user0.getBalance();
      user0.setPassword("iukX$GY ,LL");
      user0.getEmail();
      user0.getLast_name();
      user0.getPassword();
      assertEquals((-1L), (long)user0.getId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      User user0 = new User();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      assertEquals((-1L), (long)user0.getId());
      
      Long long0 = new Long((-1110L));
      user0.setId(long0);
      Long long1 = new Long((-1071L));
      user0.setId(long1);
      Long long2 = new Long(1L);
      user0.setId(long2);
      user0.setPassword(", first_name=");
      user0.getPassword();
      user0.toString();
      user0.getId();
      assertEquals(0L, (long)user0.getBalance());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Long long0 = new Long((-1022L));
      User user0 = new User(long0, "B 3", "B 3", "B 3", "");
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      user0.toString();
      user0.toString();
      user0.getId();
      String string0 = user0.toString();
      assertEquals("User{id=-1022, email=B 3, password=B 3, first_name=B 3, last_name=, balance=0, stripeId=null}", string0);
      
      Long long1 = user0.getBalance();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Long long0 = new Long((-2507L));
      User user0 = new User(long0, (String) null, "", "", (String) null);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      user0.toString();
      user0.setEmail("");
      user0.setStripeId("");
      Long long1 = new Long((-2507L));
      user0.setBalance(long1);
      user0.setId((Long) null);
      user0.setLast_name((String) null);
      user0.getLast_name();
      user0.getBalance();
      user0.getId();
      user0.getFirst_name();
      user0.getId();
      user0.getStripeId();
      user0.setPassword("PERCENTAGE");
      user0.toString();
      user0.getId();
      user0.getStripeId();
      user0.setPassword(", password=");
      assertEquals("", user0.getEmail());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      User user0 = new User();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      user0.getPassword();
      assertEquals(0L, (long)user0.getBalance());
      assertEquals((-1L), (long)user0.getId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Long long0 = new Long(0L);
      User user0 = new User(long0, "BCmPZ>&~I;?\"%WY=y", "BCmPZ>&~I;?\"%WY=y", "BCmPZ>&~I;?\"%WY=y", "BCmPZ>&~I;?\"%WY=y");
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      user0.setLast_name("BCmPZ>&~I;?\"%WY=y");
      user0.getSchedule();
      user0.getId();
      assertEquals(0L, (long)user0.getBalance());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Long long0 = new Long(0L);
      User user0 = new User(long0, ", stripeId=", "", "", "");
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      user0.getStripeId();
      assertEquals("", user0.getLast_name());
      assertEquals("", user0.getPassword());
      assertEquals(", stripeId=", user0.getEmail());
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("", user0.getFirst_name());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      User user0 = new User("", "c)~D8hh1,4[2c_", "", "16*5]':)j\nNx>g#Q");
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      String string0 = user0.getLast_name();
      assertEquals((-1L), (long)user0.getId());
      assertEquals("c)~D8hh1,4[2c_", user0.getPassword());
      assertEquals("", user0.getFirst_name());
      assertEquals("16*5]':)j\nNx>g#Q", string0);
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("", user0.getEmail());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      User user0 = new User("W'k4{HCwZu\"zBF", "W'k4{HCwZu\"zBF");
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      user0.getEmail();
      assertEquals(0L, (long)user0.getBalance());
      assertEquals((-1L), (long)user0.getId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      User user0 = new User();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      User user1 = new User();
      UserService userService1 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user1, (Class<?>) User.class, "service", (Object) userService1);
      Injector.validateBean(user1, (Class<?>) User.class);
      user0.setUser(user1);
      assertEquals((-1L), (long)user1.getId());
      assertEquals(0L, (long)user1.getBalance());
      assertEquals((-1L), (long)user0.getId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      User user0 = new User("e~&|muF$HhggF?x", "e~&|muF$HhggF?x", "", "");
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      user0.toString();
      UserService userService1 = user0.service;
      user0.service = userService1;
      user0.setPassword("lY(6(-?=");
      Long long0 = new Long(1637L);
      user0.setBalance(long0);
      user0.getStripeId();
      user0.setFirst_name(", password=");
      user0.getBalance();
      user0.setLast_name("e~&|muF$HhggF?x");
      user0.setStripeId("");
      // Undeclared exception!
      try { 
        user0.setUser((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.travlendar.backend.model.user.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      User user0 = new User();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      // Undeclared exception!
      try { 
        user0.setUser((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.travlendar.backend.model.user.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      User user0 = new User("4P0Q@>Mg^6zkVYqg%P", "4P0Q@>Mg^6zkVYqg%P", "', message [", "");
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      String string0 = user0.getFirst_name();
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("", user0.getLast_name());
      assertEquals("4P0Q@>Mg^6zkVYqg%P", user0.getPassword());
      assertEquals("', message [", string0);
      assertEquals("4P0Q@>Mg^6zkVYqg%P", user0.getEmail());
      assertEquals((-1L), (long)user0.getId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      User user0 = new User(", password=", ", last_name=");
      UserService userService1 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService1);
      Injector.validateBean(user0, (Class<?>) User.class);
      user0.setLast_name(", password=");
      UserService userService2 = user0.service;
      String string0 = user0.getPassword();
      assertEquals(", last_name=", string0);
      
      Long long0 = user0.getId();
      assertEquals(", password=", user0.getEmail());
      assertEquals((-1L), (long)long0);
      assertEquals(0L, (long)user0.getBalance());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Long long0 = new Long(0L);
      User user0 = new User(long0, (String) null, (String) null, (String) null, (String) null);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      user0.setStripeId((String) null);
      user0.setStripeId("?)");
      String string0 = user0.toString();
      assertEquals("User{id=0, email=null, password=null, first_name=null, last_name=null, balance=0, stripeId=?)}", string0);
      
      User user1 = new User((String) null, (String) null, (String) null, (String) null);
      UserService userService1 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user1, (Class<?>) User.class, "service", (Object) userService1);
      Injector.validateBean(user1, (Class<?>) User.class);
      assertEquals(0L, (long)user1.getBalance());
      assertEquals((-1L), (long)user1.getId());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      User user0 = new User("", "");
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Long long0 = new Long((-1L));
      user0.setId(long0);
      user0.setLast_name("");
      user0.getEmail();
      user0.getSchedule();
      UserService userService1 = mock(UserService.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      User user0 = new User();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      user0.setFirst_name("");
      user0.setPassword("");
      Long long0 = user0.getBalance();
      assertEquals(0L, (long)long0);
      
      user0.getLast_name();
      user0.setBalance(long0);
      UserService userService1 = user0.service;
      user0.setEmail("");
      user0.setUser(user0);
      user0.getFirst_name();
      user0.getStripeId();
      user0.setUser(user0);
      assertEquals((-1L), (long)user0.getId());
  }
}
