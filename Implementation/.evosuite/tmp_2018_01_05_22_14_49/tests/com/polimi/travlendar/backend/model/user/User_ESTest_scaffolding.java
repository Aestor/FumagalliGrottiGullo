/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Fri Jan 05 22:13:12 GMT 2018
 */

package com.polimi.travlendar.backend.model.user;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class User_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.polimi.travlendar.backend.model.user.User"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("user.country", "US"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.timezone", "Europe/Rome"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(User_ESTest_scaffolding.class.getClassLoader() ,
      "com.vaadin.ui.Panel",
      "com.polimi.travlendar.backend.model.user.User",
      "com.vaadin.ui.CustomComponent",
      "com.vaadin.event.Action$Listener",
      "com.vaadin.ui.UI",
      "org.springframework.beans.factory.annotation.Autowired",
      "com.vaadin.server.Sizeable$Unit",
      "com.vaadin.ui.Window",
      "com.vaadin.ui.HasComponents",
      "com.vaadin.shared.AbstractComponentState",
      "com.vaadin.event.ConnectorEvent",
      "com.vaadin.server.VaadinRequest",
      "com.vaadin.ui.Component$ErrorEvent",
      "com.vaadin.server.ErrorHandler",
      "com.vaadin.event.MethodEventSource",
      "elemental.json.JsonValue",
      "org.vaadin.addon.calendar.item.BasicItem",
      "org.vaadin.addon.calendar.ui.CalendarComponentEvents$ItemResizeNotifier",
      "com.vaadin.event.Action$Handler",
      "org.vaadin.addon.calendar.item.CalendarItem",
      "org.jsoup.nodes.Element",
      "com.vaadin.ui.declarative.DesignContext",
      "com.vaadin.event.ContextClickEvent",
      "org.vaadin.addon.calendar.Calendar",
      "com.vaadin.event.ShortcutAction",
      "com.vaadin.shared.Connector",
      "com.vaadin.ui.HasComponents$ComponentAttachDetachNotifier",
      "org.springframework.dao.EmptyResultDataAccessException",
      "com.polimi.travlendar.backend.model.events.MeetingItem",
      "com.vaadin.event.ContextClickEvent$ContextClickNotifier",
      "org.springframework.dao.NonTransientDataAccessException",
      "org.springframework.core.NestedRuntimeException",
      "com.vaadin.event.Action",
      "com.vaadin.server.VaadinResponse",
      "org.vaadin.addon.calendar.item.EditableCalendarItem",
      "com.vaadin.server.Extension",
      "org.vaadin.addon.calendar.ui.CalendarComponentEvents$ItemMoveNotifier",
      "com.vaadin.server.ClientConnector$AttachEvent",
      "org.jsoup.nodes.Node",
      "org.vaadin.addon.calendar.item.CalendarItemProvider$ItemSetChangedListener",
      "com.vaadin.ui.AbstractComponent",
      "org.vaadin.addon.calendar.item.CalendarItemProvider",
      "org.springframework.jdbc.core.RowMapper",
      "com.polimi.travlendar.backend.model.events.Schedule$Edit",
      "com.vaadin.server.ClientConnector$DetachListener",
      "org.springframework.dao.DataAccessException",
      "org.springframework.dao.IncorrectResultSizeDataAccessException",
      "com.vaadin.ui.Component$Event",
      "com.vaadin.event.FieldEvents$BlurNotifier",
      "com.vaadin.spring.annotation.VaadinSessionScope",
      "com.vaadin.event.dd.DropTarget",
      "org.vaadin.addon.calendar.ui.CalendarComponentEvents$NavigationNotifier",
      "com.vaadin.ui.Component$Listener",
      "org.springframework.dao.DataRetrievalFailureException",
      "org.springframework.context.annotation.Scope",
      "com.vaadin.server.ClientConnector$DetachEvent",
      "com.vaadin.server.Scrollable",
      "com.vaadin.spring.annotation.SpringComponent",
      "com.vaadin.event.ConnectorActionManager",
      "com.vaadin.server.AbstractClientConnector",
      "com.polimi.travlendar.backend.model.events.Meeting",
      "com.polimi.travlendar.backend.model.user.UserSettings",
      "com.vaadin.server.Resource",
      "com.vaadin.shared.Registration",
      "com.vaadin.event.MouseEvents$ClickEvent",
      "com.vaadin.server.VariableOwner",
      "com.vaadin.server.ClientConnector",
      "org.vaadin.addon.calendar.ui.CalendarComponentEvents$DateClickHandler",
      "com.vaadin.event.ActionManager",
      "org.vaadin.addon.calendar.ui.CalendarComponentEvents$RangeSelectNotifier",
      "com.polimi.travlendar.backend.beans.UserService",
      "com.vaadin.shared.ui.ContentMode",
      "com.vaadin.shared.communication.SharedState",
      "com.vaadin.shared.communication.ServerRpc",
      "com.vaadin.server.ServerRpcManager",
      "org.springframework.context.annotation.ScopedProxyMode",
      "com.vaadin.event.ConnectorEventListener",
      "com.vaadin.ui.AbstractSingleComponentContainer",
      "com.vaadin.ui.LegacyComponent",
      "com.vaadin.server.ErrorMessage",
      "com.vaadin.server.Sizeable",
      "com.vaadin.ui.SingleComponentContainer",
      "com.vaadin.event.ContextClickEvent$ContextClickListener",
      "com.vaadin.shared.customcomponent.CustomComponentState",
      "org.springframework.stereotype.Component",
      "com.vaadin.server.ClientConnector$AttachListener",
      "com.polimi.travlendar.backend.model.events.Schedule",
      "com.vaadin.event.UIEvents$PollNotifier",
      "com.vaadin.event.ShortcutListener",
      "com.vaadin.ui.Component$Focusable",
      "elemental.json.JsonObject",
      "com.vaadin.event.Action$Notifier",
      "com.vaadin.event.Action$Container",
      "com.vaadin.event.SerializableEventListener",
      "com.vaadin.ui.Component",
      "com.vaadin.event.FieldEvents$FocusNotifier"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("com.polimi.travlendar.backend.beans.UserService", false, User_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(User_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.springframework.context.annotation.ScopedProxyMode"
    );
  }
}
