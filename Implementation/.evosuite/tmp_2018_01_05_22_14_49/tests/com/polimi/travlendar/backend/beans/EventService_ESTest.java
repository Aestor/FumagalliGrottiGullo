/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 05 21:45:12 GMT 2018
 */

package com.polimi.travlendar.backend.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mysql.fabric.jdbc.FabricMySQLDataSource;
import com.mysql.jdbc.NonRegisteringDriver;
import com.polimi.travlendar.backend.beans.EventService;
import com.polimi.travlendar.backend.beans.UserService;
import com.polimi.travlendar.backend.model.events.Meeting;
import com.polimi.travlendar.backend.model.user.User;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy;
import org.springframework.jdbc.datasource.SimpleDriverDataSource;
import org.springframework.jdbc.datasource.SingleConnectionDataSource;
import org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EventService_ESTest extends EventService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EventService eventService0 = new EventService();
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource();
      TransactionAwareDataSourceProxy transactionAwareDataSourceProxy0 = new TransactionAwareDataSourceProxy(driverManagerDataSource0);
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(transactionAwareDataSourceProxy0);
      Injector.inject(eventService0, (Class<?>) EventService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User();
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(eventService0, (Class<?>) EventService.class, "user", (Object) user0);
      Injector.validateBean(eventService0, (Class<?>) EventService.class);
      // Undeclared exception!
      try { 
        eventService0.getMeetings(user0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // PreparedStatementCallback; SQL [SELECT * FROM events WHERE id=?]; The url cannot be null; nested exception is java.sql.SQLException: The url cannot be null
         //
         verifyException("org.springframework.jdbc.support.SQLStateSQLExceptionTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EventService eventService0 = new EventService();
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource("*o}{_uT");
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(driverManagerDataSource0, true);
      Injector.inject(eventService0, (Class<?>) EventService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User("*o}{_uT", "*o}{_uT", "*o}{_uT", "G[t`8<rqSUND>`");
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(eventService0, (Class<?>) EventService.class, "user", (Object) user0);
      Injector.validateBean(eventService0, (Class<?>) EventService.class);
      // Undeclared exception!
      try { 
        eventService0.getMeetings(user0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get JDBC Connection; nested exception is java.sql.SQLException: No suitable driver found for *o}{_uT
         //
         verifyException("org.springframework.jdbc.datasource.DataSourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EventService eventService0 = new EventService();
      LazyConnectionDataSourceProxy lazyConnectionDataSourceProxy0 = new LazyConnectionDataSourceProxy();
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(lazyConnectionDataSourceProxy0, true);
      Injector.inject(eventService0, (Class<?>) EventService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User("", "MysqlIO.42");
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(eventService0, (Class<?>) EventService.class, "user", (Object) user0);
      Injector.validateBean(eventService0, (Class<?>) EventService.class);
      // Undeclared exception!
      try { 
        eventService0.getMeetings(user0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy$LazyConnectionInvocationHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EventService eventService0 = new EventService();
      SingleConnectionDataSource singleConnectionDataSource0 = new SingleConnectionDataSource();
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(singleConnectionDataSource0);
      Injector.inject(eventService0, (Class<?>) EventService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User("3P9}FuC[9m", "");
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(eventService0, (Class<?>) EventService.class, "user", (Object) user0);
      Injector.validateBean(eventService0, (Class<?>) EventService.class);
      // Undeclared exception!
      try { 
        eventService0.getMeetings(user0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 'url' property is required for lazily initializing a Connection
         //
         verifyException("org.springframework.jdbc.datasource.SingleConnectionDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EventService eventService0 = new EventService();
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate();
      Injector.inject(eventService0, (Class<?>) EventService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User();
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(eventService0, (Class<?>) EventService.class, "user", (Object) user0);
      Injector.validateBean(eventService0, (Class<?>) EventService.class);
      // Undeclared exception!
      try { 
        eventService0.getMeetings(user0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No DataSource specified
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EventService eventService0 = new EventService();
      SingleConnectionDataSource singleConnectionDataSource0 = new SingleConnectionDataSource("locale: ", false);
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(singleConnectionDataSource0);
      Injector.inject(eventService0, (Class<?>) EventService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User();
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(eventService0, (Class<?>) EventService.class, "user", (Object) user0);
      Injector.validateBean(eventService0, (Class<?>) EventService.class);
      Meeting meeting0 = new Meeting(false);
      // Undeclared exception!
      try { 
        eventService0.deleteMeeting(meeting0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get JDBC Connection; nested exception is java.sql.SQLException: No suitable driver found for locale:
         //
         verifyException("org.springframework.jdbc.datasource.DataSourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EventService eventService0 = new EventService();
      FabricMySQLDataSource fabricMySQLDataSource0 = new FabricMySQLDataSource();
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(fabricMySQLDataSource0);
      Injector.inject(eventService0, (Class<?>) EventService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User();
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(eventService0, (Class<?>) EventService.class, "user", (Object) user0);
      Injector.validateBean(eventService0, (Class<?>) EventService.class);
      Meeting meeting0 = new Meeting(false);
      // Undeclared exception!
      try { 
        eventService0.deleteMeeting(meeting0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EventService eventService0 = new EventService();
      NonRegisteringDriver nonRegisteringDriver0 = new NonRegisteringDriver();
      SimpleDriverDataSource simpleDriverDataSource0 = new SimpleDriverDataSource(nonRegisteringDriver0, "user");
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(simpleDriverDataSource0);
      Injector.inject(eventService0, (Class<?>) EventService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User("", "Bzzp\"QZ", "PATH", "");
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(eventService0, (Class<?>) EventService.class, "user", (Object) user0);
      Injector.validateBean(eventService0, (Class<?>) EventService.class);
      Meeting meeting0 = new Meeting(true);
      // Undeclared exception!
      try { 
        eventService0.deleteMeeting(meeting0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.jdbc.core.JdbcTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventService eventService0 = new EventService();
      TransactionAwareDataSourceProxy transactionAwareDataSourceProxy0 = new TransactionAwareDataSourceProxy();
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(transactionAwareDataSourceProxy0, true);
      Injector.inject(eventService0, (Class<?>) EventService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Long long0 = new Long(2087L);
      User user0 = new User(long0, "COALESCE", "s5cop1#e6", "0)q'(<_M%", (String) null);
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(eventService0, (Class<?>) EventService.class, "user", (Object) user0);
      Injector.validateBean(eventService0, (Class<?>) EventService.class);
      Meeting meeting0 = new Meeting(false);
      // Undeclared exception!
      try { 
        eventService0.deleteMeeting(meeting0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 'targetDataSource' is required
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventService eventService0 = new EventService();
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate();
      Injector.inject(eventService0, (Class<?>) EventService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User();
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(eventService0, (Class<?>) EventService.class, "user", (Object) user0);
      Injector.validateBean(eventService0, (Class<?>) EventService.class);
      Meeting meeting0 = new Meeting(true);
      // Undeclared exception!
      try { 
        eventService0.deleteMeeting(meeting0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No DataSource specified
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EventService eventService0 = new EventService();
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource();
      TransactionAwareDataSourceProxy transactionAwareDataSourceProxy0 = new TransactionAwareDataSourceProxy(driverManagerDataSource0);
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(transactionAwareDataSourceProxy0);
      Injector.inject(eventService0, (Class<?>) EventService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User();
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(eventService0, (Class<?>) EventService.class, "user", (Object) user0);
      Injector.validateBean(eventService0, (Class<?>) EventService.class);
      Meeting meeting0 = new Meeting(true);
      // Undeclared exception!
      try { 
        eventService0.deleteMeeting(meeting0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // StatementCallback; SQL [DELETE FROM events WHERE eventid=0;]; The url cannot be null; nested exception is java.sql.SQLException: The url cannot be null
         //
         verifyException("org.springframework.jdbc.support.SQLStateSQLExceptionTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EventService eventService0 = new EventService();
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate();
      Long long0 = new Long(3355L);
      User user0 = new User(long0, "", "", "Pe[wE9&1a=pn}y2", "Pe[wE9&1a=pn}y2");
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      // Undeclared exception!
      try { 
        eventService0.getMeetings(user0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.travlendar.backend.beans.EventService", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EventService eventService0 = new EventService();
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate();
      Injector.inject(eventService0, (Class<?>) EventService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User();
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(eventService0, (Class<?>) EventService.class, "user", (Object) user0);
      Injector.validateBean(eventService0, (Class<?>) EventService.class);
      Meeting meeting0 = new Meeting(false);
      // Undeclared exception!
      try { 
        eventService0.addMeeting(meeting0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.travlendar.backend.beans.EventService", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EventService eventService0 = new EventService();
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate();
      Injector.inject(eventService0, (Class<?>) EventService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User();
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(eventService0, (Class<?>) EventService.class, "user", (Object) user0);
      Injector.validateBean(eventService0, (Class<?>) EventService.class);
      Meeting meeting0 = new Meeting(true);
      // Undeclared exception!
      try { 
        eventService0.editMeeting(meeting0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.travlendar.backend.beans.EventService", e);
      }
  }
}
