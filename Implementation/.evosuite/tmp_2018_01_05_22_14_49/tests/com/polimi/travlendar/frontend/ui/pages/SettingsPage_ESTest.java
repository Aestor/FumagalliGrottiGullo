/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 05 22:22:35 GMT 2018
 */

package com.polimi.travlendar.frontend.ui.pages;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.polimi.travlendar.backend.model.user.User;
import com.polimi.travlendar.frontend.ui.forms.UpdateAccountForm;
import com.polimi.travlendar.frontend.ui.pages.SettingsPage;
import com.vaadin.navigator.ViewChangeListener;
import com.vaadin.ui.HasComponents;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SettingsPage_ESTest extends SettingsPage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SettingsPage settingsPage0 = new SettingsPage();
      UpdateAccountForm updateAccountForm0 = mock(UpdateAccountForm.class, new ViolatedAssumptionAnswer());
      doReturn((HasComponents) null).when(updateAccountForm0).getParent();
      Injector.inject(settingsPage0, (Class<?>) SettingsPage.class, "form", (Object) updateAccountForm0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      Injector.inject(settingsPage0, (Class<?>) SettingsPage.class, "user", (Object) user0);
      Injector.validateBean(settingsPage0, (Class<?>) SettingsPage.class);
      UpdateAccountForm updateAccountForm1 = settingsPage0.form;
      settingsPage0.setParent(updateAccountForm1);
      // Undeclared exception!
      try { 
        settingsPage0.enter((ViewChangeListener.ViewChangeEvent) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Component cannot be added inside it's own content
         //
         verifyException("com.vaadin.ui.AbstractComponentContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SettingsPage settingsPage0 = new SettingsPage();
      UpdateAccountForm updateAccountForm0 = mock(UpdateAccountForm.class, new ViolatedAssumptionAnswer());
      doReturn((HasComponents) null).when(updateAccountForm0).getParent();
      Injector.inject(settingsPage0, (Class<?>) SettingsPage.class, "form", (Object) updateAccountForm0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      Injector.inject(settingsPage0, (Class<?>) SettingsPage.class, "user", (Object) user0);
      Injector.validateBean(settingsPage0, (Class<?>) SettingsPage.class);
      settingsPage0.enter((ViewChangeListener.ViewChangeEvent) null);
      assertTrue(settingsPage0.isVisible());
  }
}
