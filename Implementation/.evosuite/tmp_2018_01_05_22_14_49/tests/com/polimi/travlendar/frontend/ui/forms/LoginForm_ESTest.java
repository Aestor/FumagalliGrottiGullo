/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 05 22:11:35 GMT 2018
 */

package com.polimi.travlendar.frontend.ui.forms;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.polimi.travlendar.backend.beans.UserService;
import com.polimi.travlendar.backend.model.user.User;
import com.polimi.travlendar.frontend.ui.forms.LoginForm;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LoginForm_ESTest extends LoginForm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LoginForm loginForm0 = new LoginForm();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(userService0).authenticate(any(com.polimi.travlendar.backend.model.user.User.class));
      doReturn((User) null).when(userService0).getUser(anyString() , anyString());
      Injector.inject(loginForm0, (Class<?>) LoginForm.class, "service", (Object) userService0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      Injector.inject(loginForm0, (Class<?>) LoginForm.class, "user", (Object) user0);
      Injector.validateBean(loginForm0, (Class<?>) LoginForm.class);
      // Undeclared exception!
      try { 
        loginForm0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.travlendar.frontend.ui.forms.LoginForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LoginForm loginForm0 = new LoginForm();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(userService0).authenticate(any(com.polimi.travlendar.backend.model.user.User.class));
      Injector.inject(loginForm0, (Class<?>) LoginForm.class, "service", (Object) userService0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      Injector.inject(loginForm0, (Class<?>) LoginForm.class, "user", (Object) user0);
      Injector.validateBean(loginForm0, (Class<?>) LoginForm.class);
      // Undeclared exception!
      try { 
        loginForm0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.vaadin.ui.Notification", e);
      }
  }
}
