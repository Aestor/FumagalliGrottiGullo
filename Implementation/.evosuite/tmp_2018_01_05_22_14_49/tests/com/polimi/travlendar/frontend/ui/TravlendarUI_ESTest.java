/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 05 22:10:33 GMT 2018
 */

package com.polimi.travlendar.frontend.ui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.polimi.travlendar.backend.beans.UserService;
import com.polimi.travlendar.backend.model.user.User;
import com.polimi.travlendar.frontend.ui.TravlendarUI;
import com.vaadin.server.VaadinRequest;
import com.vaadin.spring.navigator.SpringNavigator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.FalsePositiveException;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TravlendarUI_ESTest extends TravlendarUI_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TravlendarUI travlendarUI0 = new TravlendarUI();
      UserService userService0 = travlendarUI0.getService();
      SpringNavigator springNavigator0 = mock(SpringNavigator.class, new ViolatedAssumptionAnswer());
      Injector.inject(travlendarUI0, (Class<?>) TravlendarUI.class, "navigator", (Object) springNavigator0);
      Injector.inject(travlendarUI0, (Class<?>) TravlendarUI.class, "service", (Object) userService0);
      try { 
        Injector.validateBean(travlendarUI0, (Class<?>) TravlendarUI.class);
        fail("Expecting exception: FalsePositiveException");
      
      } catch(FalsePositiveException e) {
         //
         // Missing dependency injection for field service in class com.polimi.travlendar.frontend.ui.TravlendarUI
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TravlendarUI travlendarUI0 = new TravlendarUI();
      SpringNavigator springNavigator0 = mock(SpringNavigator.class, new ViolatedAssumptionAnswer());
      Injector.inject(travlendarUI0, (Class<?>) TravlendarUI.class, "navigator", (Object) springNavigator0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(travlendarUI0, (Class<?>) TravlendarUI.class, "service", (Object) userService0);
      Injector.validateBean(travlendarUI0, (Class<?>) TravlendarUI.class);
      VaadinRequest vaadinRequest0 = mock(VaadinRequest.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        travlendarUI0.init(vaadinRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.travlendar.frontend.ui.TravlendarUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TravlendarUI travlendarUI0 = new TravlendarUI();
      SpringNavigator springNavigator0 = mock(SpringNavigator.class, new ViolatedAssumptionAnswer());
      Injector.inject(travlendarUI0, (Class<?>) TravlendarUI.class, "navigator", (Object) springNavigator0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(travlendarUI0, (Class<?>) TravlendarUI.class, "service", (Object) userService0);
      Injector.validateBean(travlendarUI0, (Class<?>) TravlendarUI.class);
      // Undeclared exception!
      try { 
        travlendarUI0.setMenuBar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.travlendar.frontend.ui.TravlendarUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TravlendarUI travlendarUI0 = new TravlendarUI();
      SpringNavigator springNavigator0 = mock(SpringNavigator.class, new ViolatedAssumptionAnswer());
      Injector.inject(travlendarUI0, (Class<?>) TravlendarUI.class, "navigator", (Object) springNavigator0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(travlendarUI0, (Class<?>) TravlendarUI.class, "service", (Object) userService0);
      Injector.validateBean(travlendarUI0, (Class<?>) TravlendarUI.class);
      // Undeclared exception!
      try { 
        travlendarUI0.setUnloggedMenuBar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.appreciated.app.layout.session.AppLayoutSessionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TravlendarUI travlendarUI0 = new TravlendarUI();
      SpringNavigator springNavigator0 = mock(SpringNavigator.class, new ViolatedAssumptionAnswer());
      Injector.inject(travlendarUI0, (Class<?>) TravlendarUI.class, "navigator", (Object) springNavigator0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(userService0).toString();
      Injector.inject(travlendarUI0, (Class<?>) TravlendarUI.class, "service", (Object) userService0);
      Injector.validateBean(travlendarUI0, (Class<?>) TravlendarUI.class);
      UserService userService1 = travlendarUI0.getService();
      assertSame(userService1, userService0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TravlendarUI travlendarUI0 = new TravlendarUI();
      SpringNavigator springNavigator0 = mock(SpringNavigator.class, new ViolatedAssumptionAnswer());
      Injector.inject(travlendarUI0, (Class<?>) TravlendarUI.class, "navigator", (Object) springNavigator0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(travlendarUI0, (Class<?>) TravlendarUI.class, "service", (Object) userService0);
      Injector.validateBean(travlendarUI0, (Class<?>) TravlendarUI.class);
      travlendarUI0.setCurrentUser((User) null);
      assertFalse(travlendarUI0.isClosing());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TravlendarUI travlendarUI0 = new TravlendarUI();
      SpringNavigator springNavigator0 = mock(SpringNavigator.class, new ViolatedAssumptionAnswer());
      Injector.inject(travlendarUI0, (Class<?>) TravlendarUI.class, "navigator", (Object) springNavigator0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(travlendarUI0, (Class<?>) TravlendarUI.class, "service", (Object) userService0);
      Injector.validateBean(travlendarUI0, (Class<?>) TravlendarUI.class);
      User user0 = travlendarUI0.getCurrentUser();
      assertNull(user0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TravlendarUI.Servlet travlendarUI_Servlet0 = new TravlendarUI.Servlet();
      assertEquals("valo", travlendarUI_Servlet0.getDefaultTheme());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TravlendarUI.SpringConfiguration travlendarUI_SpringConfiguration0 = new TravlendarUI.SpringConfiguration();
  }
}
