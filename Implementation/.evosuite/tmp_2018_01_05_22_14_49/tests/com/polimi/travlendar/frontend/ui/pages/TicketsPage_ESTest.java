/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 05 21:33:00 GMT 2018
 */

package com.polimi.travlendar.frontend.ui.pages;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mysql.jdbc.ReplicationDriver;
import com.polimi.travlendar.backend.beans.TicketService;
import com.polimi.travlendar.backend.beans.UserService;
import com.polimi.travlendar.backend.model.user.User;
import com.polimi.travlendar.frontend.ui.forms.NewTicketForm;
import com.polimi.travlendar.frontend.ui.pages.TicketsPage;
import com.vaadin.navigator.ViewChangeListener;
import java.sql.Driver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.SimpleDriverDataSource;
import org.springframework.jdbc.datasource.SingleConnectionDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TicketsPage_ESTest extends TicketsPage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TicketsPage ticketsPage0 = new TicketsPage();
      NewTicketForm newTicketForm0 = new NewTicketForm();
      TicketService ticketService0 = new TicketService();
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate();
      Injector.inject(ticketService0, (Class<?>) TicketService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User();
      SingleConnectionDataSource singleConnectionDataSource0 = new SingleConnectionDataSource("Tickets Page", "Tickets Page", "Tickets Page", true);
      jdbcTemplate0.setDataSource(singleConnectionDataSource0);
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(ticketService0, (Class<?>) TicketService.class, "user", (Object) user0);
      Injector.validateBean(ticketService0, (Class<?>) TicketService.class);
      Injector.inject(newTicketForm0, (Class<?>) NewTicketForm.class, "service", (Object) ticketService0);
      Injector.inject(newTicketForm0, (Class<?>) NewTicketForm.class, "user", (Object) user0);
      Injector.validateBean(newTicketForm0, (Class<?>) NewTicketForm.class);
      Injector.inject(ticketsPage0, (Class<?>) TicketsPage.class, "form", (Object) newTicketForm0);
      Injector.inject(ticketsPage0, (Class<?>) TicketsPage.class, "user", (Object) user0);
      Injector.validateBean(ticketsPage0, (Class<?>) TicketsPage.class);
      // Undeclared exception!
      try { 
        ticketsPage0.enter((ViewChangeListener.ViewChangeEvent) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get JDBC Connection; nested exception is java.sql.SQLException: No suitable driver found for Tickets Page
         //
         verifyException("org.springframework.jdbc.datasource.DataSourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TicketsPage ticketsPage0 = new TicketsPage();
      // Undeclared exception!
      try { 
        ticketsPage0.enter((ViewChangeListener.ViewChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.travlendar.frontend.ui.pages.TicketsPage", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TicketsPage ticketsPage0 = new TicketsPage();
      NewTicketForm newTicketForm0 = new NewTicketForm();
      TicketService ticketService0 = new TicketService();
      SimpleDriverDataSource simpleDriverDataSource0 = new SimpleDriverDataSource((Driver) null, "Tickets Page");
      Class<ReplicationDriver> class0 = ReplicationDriver.class;
      simpleDriverDataSource0.setDriverClass(class0);
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(simpleDriverDataSource0);
      Injector.inject(ticketService0, (Class<?>) TicketService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User("Tickets Page", "Tickets Page", "Tickets Page", "Tickets Page");
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(ticketService0, (Class<?>) TicketService.class, "user", (Object) user0);
      Injector.validateBean(ticketService0, (Class<?>) TicketService.class);
      Injector.inject(newTicketForm0, (Class<?>) NewTicketForm.class, "service", (Object) ticketService0);
      Injector.inject(newTicketForm0, (Class<?>) NewTicketForm.class, "user", (Object) user0);
      Injector.validateBean(newTicketForm0, (Class<?>) NewTicketForm.class);
      Injector.inject(ticketsPage0, (Class<?>) TicketsPage.class, "form", (Object) newTicketForm0);
      Injector.inject(ticketsPage0, (Class<?>) TicketsPage.class, "user", (Object) user0);
      Injector.validateBean(ticketsPage0, (Class<?>) TicketsPage.class);
      // Undeclared exception!
      try { 
        ticketsPage0.enter((ViewChangeListener.ViewChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.jdbc.core.JdbcTemplate$SimplePreparedStatementCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TicketsPage ticketsPage0 = new TicketsPage();
      NewTicketForm newTicketForm0 = new NewTicketForm();
      TicketService ticketService0 = new TicketService();
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate();
      Injector.inject(ticketService0, (Class<?>) TicketService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User();
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(ticketService0, (Class<?>) TicketService.class, "user", (Object) user0);
      Injector.validateBean(ticketService0, (Class<?>) TicketService.class);
      Injector.inject(newTicketForm0, (Class<?>) NewTicketForm.class, "service", (Object) ticketService0);
      Injector.inject(newTicketForm0, (Class<?>) NewTicketForm.class, "user", (Object) user0);
      Injector.validateBean(newTicketForm0, (Class<?>) NewTicketForm.class);
      Injector.inject(ticketsPage0, (Class<?>) TicketsPage.class, "form", (Object) newTicketForm0);
      Injector.inject(ticketsPage0, (Class<?>) TicketsPage.class, "user", (Object) user0);
      Injector.validateBean(ticketsPage0, (Class<?>) TicketsPage.class);
      // Undeclared exception!
      try { 
        ticketsPage0.enter((ViewChangeListener.ViewChangeEvent) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No DataSource specified
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }
}
