/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 05 22:00:40 GMT 2018
 */

package com.polimi.fakePTS;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.polimi.fakePTS.RandomTicketId;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RandomTicketId_ESTest extends RandomTicketId_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RandomTicketId randomTicketId0 = null;
      try {
        randomTicketId0 = new RandomTicketId(2, (Random) null, "Z`P'lwn*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RandomTicketId randomTicketId0 = null;
      try {
        randomTicketId0 = new RandomTicketId(187, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RandomTicketId randomTicketId0 = null;
      try {
        randomTicketId0 = new RandomTicketId((-1827), mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.fakePTS.RandomTicketId", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RandomTicketId randomTicketId0 = null;
      try {
        randomTicketId0 = new RandomTicketId((-2712), mockRandom0, "g`:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.fakePTS.RandomTicketId", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RandomTicketId randomTicketId0 = new RandomTicketId(2018);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RandomTicketId randomTicketId0 = null;
      try {
        randomTicketId0 = new RandomTicketId(4421, mockRandom0, "^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.fakePTS.RandomTicketId", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      RandomTicketId randomTicketId0 = new RandomTicketId(4189, mockRandom0, "S(7-");
      randomTicketId0.nextString();
      randomTicketId0.nextString();
      // Undeclared exception!
      randomTicketId0.nextString();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RandomTicketId randomTicketId0 = null;
      try {
        randomTicketId0 = new RandomTicketId((-2456));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.fakePTS.RandomTicketId", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RandomTicketId randomTicketId0 = new RandomTicketId(1, mockRandom0);
  }
}
