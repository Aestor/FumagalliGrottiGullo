/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 05 22:29:04 GMT 2018
 */

package com.polimi.fakePTS.tickets;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.polimi.fakePTS.tickets.TicketType;
import com.polimi.fakePTS.tickets.TrainTicket;
import java.time.ZonedDateTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TrainTicket_ESTest extends TrainTicket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TicketType ticketType0 = TicketType.YEARPASS;
      TrainTicket trainTicket0 = new TrainTicket("lambda$null$2c74abb5$1", "lambda$null$2c74abb5$1", (-673), ticketType0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      trainTicket0.setValidationTime(zonedDateTime0);
      String string0 = trainTicket0.toString();
      assertEquals("TrainTicket: \nDeparting from: lambda$null$2c74abb5$1\nArriving at: lambda$null$2c74abb5$1\nPrice:-673\nDay of Use: 2014-02-14\nDay of Purchase: 2014-02-14 at 20:21:21.320\n Validity: 12 months", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TicketType ticketType0 = TicketType.WEEKPASS;
      TrainTicket trainTicket0 = new TrainTicket((String) null, "/~", 130, ticketType0);
      String string0 = trainTicket0.getDepartureLocation();
      assertNull(string0);
      assertEquals("/~", trainTicket0.getArrivalLocation());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TicketType ticketType0 = TicketType.WEEKPASS;
      TrainTicket trainTicket0 = new TrainTicket("", "", 0, ticketType0);
      String string0 = trainTicket0.getDepartureLocation();
      assertEquals("", string0);
      assertEquals("", trainTicket0.getArrivalLocation());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TicketType ticketType0 = TicketType.SINGLE;
      TrainTicket trainTicket0 = new TrainTicket("H{:F<", "H{:F<", 1357, ticketType0);
      String string0 = trainTicket0.getArrivalLocation();
      assertEquals("H{:F<", string0);
      assertEquals("H{:F<", trainTicket0.getDepartureLocation());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TicketType ticketType0 = TicketType.YEARPASS;
      TrainTicket trainTicket0 = new TrainTicket("", "", 1, ticketType0);
      String string0 = trainTicket0.getArrivalLocation();
      assertEquals("", trainTicket0.getDepartureLocation());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TrainTicket trainTicket0 = null;
      try {
        trainTicket0 = new TrainTicket("%2kZ?!V!cWA", "%2kZ?!V!cWA", 932, (TicketType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.fakePTS.tickets.Ticket", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TicketType ticketType0 = TicketType.YEARPASS;
      TrainTicket trainTicket0 = new TrainTicket("lambda$null$2c74abb5$1", "lambda$null$2c74abb5$1", (-673), ticketType0);
      trainTicket0.setDepartureLocation("");
      assertEquals("", trainTicket0.getDepartureLocation());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TicketType ticketType0 = TicketType.YEARPASS;
      TrainTicket trainTicket0 = new TrainTicket("lambda$null$2c74abb5$1", "lambda$null$2c74abb5$1", (-673), ticketType0);
      // Undeclared exception!
      try { 
        trainTicket0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.fakePTS.tickets.TrainTicket", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TicketType ticketType0 = TicketType.YEARPASS;
      TrainTicket trainTicket0 = new TrainTicket("lambda$null$2c74abb5$1", "lambda$null$2c74abb5$1", (-673), ticketType0);
      trainTicket0.setArrivalLocation("lambda$null$2c74abb5$1");
      assertEquals("lambda$null$2c74abb5$1", trainTicket0.getArrivalLocation());
      assertEquals("lambda$null$2c74abb5$1", trainTicket0.getDepartureLocation());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TicketType ticketType0 = TicketType.WEEKPASS;
      TrainTicket trainTicket0 = new TrainTicket((String) null, (String) null, 0, ticketType0);
      String string0 = trainTicket0.getArrivalLocation();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TicketType ticketType0 = TicketType.YEARPASS;
      TrainTicket trainTicket0 = new TrainTicket("lambda$null$2c74abb5$1", "lambda$null$2c74abb5$1", (-673), ticketType0);
      String string0 = trainTicket0.getDepartureLocation();
      assertEquals("lambda$null$2c74abb5$1", trainTicket0.getArrivalLocation());
      assertEquals("lambda$null$2c74abb5$1", string0);
  }
}
