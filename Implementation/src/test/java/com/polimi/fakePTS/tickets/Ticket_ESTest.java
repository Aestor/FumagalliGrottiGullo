/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 05 21:36:44 GMT 2018
 */

package com.polimi.fakePTS.tickets;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.polimi.fakePTS.tickets.Ticket;
import com.polimi.fakePTS.tickets.TicketType;
import java.time.Clock;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Ticket_ESTest extends Ticket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TicketType ticketType0 = TicketType.ONEMONTHPASS;
      Ticket ticket0 = new Ticket(0, ticketType0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      ticket0.setValidationTime(zonedDateTime0);
      assertFalse(ticket0.isActivated());
      assertEquals("AAAAAAAAAAAAAAAA", ticket0.getId());
      assertEquals(30, ticket0.getValidity());
      assertEquals(0, ticket0.getPrice());
      assertEquals("days", ticket0.getLenght());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TicketType ticketType0 = TicketType.ONEMONTHPASS;
      Ticket ticket0 = new Ticket(1066, ticketType0);
      ticket0.setPrice((-360));
      assertEquals((-360), ticket0.getPrice());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TicketType ticketType0 = TicketType.ONEMONTHPASS;
      Ticket ticket0 = new Ticket(0, ticketType0);
      assertFalse(ticket0.isActivated());
      
      ticket0.activated = true;
      ticket0.isActivated();
      assertEquals(30, ticket0.getValidity());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TicketType ticketType0 = TicketType.WEEKPASS;
      Ticket ticket0 = new Ticket(0, ticketType0);
      assertEquals(7, ticket0.getValidity());
      
      ticket0.setValidity(0);
      int int0 = ticket0.getValidity();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TicketType ticketType0 = TicketType.SINGLE;
      Ticket ticket0 = new Ticket(0, ticketType0);
      ticket0.setValidity((-3181));
      int int0 = ticket0.getValidity();
      assertEquals((-3181), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TicketType ticketType0 = TicketType.WEEKPASS;
      Ticket ticket0 = new Ticket(321, ticketType0);
      ZonedDateTime zonedDateTime0 = ticket0.purchase;
      ticket0.validationTime = zonedDateTime0;
      ticket0.getValidationTime();
      assertEquals(7, ticket0.getValidity());
      assertEquals("AAAAAAAAAAAAAAAA", ticket0.getId());
      assertEquals(321, ticket0.getPrice());
      assertEquals("days", ticket0.getLenght());
      assertFalse(ticket0.isActivated());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TicketType ticketType0 = TicketType.ONEMONTHPASS;
      Ticket ticket0 = new Ticket(1066, ticketType0);
      ticket0.purchase = null;
      ticket0.getPurchase();
      assertEquals("AAAAAAAAAAAAAAAA", ticket0.getId());
      assertFalse(ticket0.isActivated());
      assertEquals("days", ticket0.getLenght());
      assertEquals(30, ticket0.getValidity());
      assertEquals(1066, ticket0.getPrice());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TicketType ticketType0 = TicketType.ONEMONTHPASS;
      Ticket ticket0 = new Ticket(1773, ticketType0);
      int int0 = ticket0.getPrice();
      assertEquals("days", ticket0.getLenght());
      assertFalse(ticket0.isActivated());
      assertEquals(1773, int0);
      assertEquals("AAAAAAAAAAAAAAAA", ticket0.getId());
      assertEquals(30, ticket0.getValidity());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TicketType ticketType0 = TicketType.WEEKPASS;
      Ticket ticket0 = new Ticket((-1549), ticketType0);
      int int0 = ticket0.getPrice();
      assertEquals("AAAAAAAAAAAAAAAA", ticket0.getId());
      assertFalse(ticket0.isActivated());
      assertEquals((-1549), int0);
      assertEquals("days", ticket0.getLenght());
      assertEquals(7, ticket0.getValidity());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TicketType ticketType0 = TicketType.YEARPASS;
      Ticket ticket0 = new Ticket(893, ticketType0);
      assertEquals("months", ticket0.getLenght());
      
      ticket0.setLenght("");
      String string0 = ticket0.getLenght();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TicketType ticketType0 = TicketType.SINGLE;
      Ticket ticket0 = new Ticket(3, ticketType0);
      assertEquals("AAAAAAAAAAAAAAAA", ticket0.getId());
      
      ticket0.setId((String) null);
      String string0 = ticket0.getId();
      assertNull(string0);
      assertEquals(300, ticket0.getValidity());
      assertEquals(3, ticket0.getPrice());
      assertEquals("minutes", ticket0.getLenght());
      assertFalse(ticket0.isActivated());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TicketType ticketType0 = TicketType.ONEMONTHPASS;
      Ticket ticket0 = new Ticket(1773, ticketType0);
      ticket0.setId("");
      ticket0.getId();
      assertEquals("", ticket0.getId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Ticket ticket0 = null;
      try {
        ticket0 = new Ticket((-1194793190), (TicketType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.fakePTS.tickets.Ticket", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TicketType ticketType0 = TicketType.ONEMONTHPASS;
      Ticket ticket0 = new Ticket(0, ticketType0);
      assertEquals("days", ticket0.getLenght());
      
      ticket0.setLenght((String) null);
      ticket0.getLenght();
      assertEquals("AAAAAAAAAAAAAAAA", ticket0.getId());
      assertEquals(0, ticket0.getPrice());
      assertFalse(ticket0.isActivated());
      assertEquals(30, ticket0.getValidity());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TicketType ticketType0 = TicketType.ONEMONTHPASS;
      Ticket ticket0 = new Ticket((-2400), ticketType0);
      String string0 = ticket0.getId();
      assertEquals((-2400), ticket0.getPrice());
      assertEquals("AAAAAAAAAAAAAAAA", string0);
      assertEquals("days", ticket0.getLenght());
      assertFalse(ticket0.isActivated());
      assertEquals(30, ticket0.getValidity());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TicketType ticketType0 = TicketType.ONEMONTHPASS;
      Ticket ticket0 = new Ticket(0, ticketType0);
      String string0 = ticket0.getLenght();
      assertNotNull(string0);
      assertFalse(ticket0.isActivated());
      assertEquals(30, ticket0.getValidity());
      assertEquals(0, ticket0.getPrice());
      assertEquals("days", string0);
      assertEquals("AAAAAAAAAAAAAAAA", ticket0.getId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TicketType ticketType0 = TicketType.SINGLE;
      Ticket ticket0 = new Ticket(3, ticketType0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofStrict(localDateTime0, zoneOffset0, zoneOffset0);
      ticket0.setPurchase(zonedDateTime0);
      assertEquals(300, ticket0.getValidity());
      assertEquals(3, ticket0.getPrice());
      assertEquals("AAAAAAAAAAAAAAAA", ticket0.getId());
      assertEquals("minutes", ticket0.getLenght());
      assertFalse(ticket0.isActivated());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TicketType ticketType0 = TicketType.ONEMONTHPASS;
      Ticket ticket0 = new Ticket(0, ticketType0);
      ticket0.getType();
      assertEquals("AAAAAAAAAAAAAAAA", ticket0.getId());
      assertFalse(ticket0.isActivated());
      assertEquals(0, ticket0.getPrice());
      assertEquals("days", ticket0.getLenght());
      assertEquals(30, ticket0.getValidity());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TicketType ticketType0 = TicketType.SINGLE;
      Ticket ticket0 = new Ticket(0, ticketType0);
      int int0 = ticket0.getValidity();
      assertFalse(ticket0.isActivated());
      assertEquals("minutes", ticket0.getLenght());
      assertEquals(300, int0);
      assertEquals(0, ticket0.getPrice());
      assertEquals("AAAAAAAAAAAAAAAA", ticket0.getId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TicketType ticketType0 = TicketType.YEARPASS;
      Ticket ticket0 = new Ticket(0, ticketType0);
      assertFalse(ticket0.isActivated());
      
      ticket0.setActivated(true);
      assertTrue(ticket0.isActivated());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TicketType ticketType0 = TicketType.ONEMONTHPASS;
      Ticket ticket0 = new Ticket(0, ticketType0);
      int int0 = ticket0.getPrice();
      assertEquals(0, int0);
      assertEquals("days", ticket0.getLenght());
      assertFalse(ticket0.isActivated());
      assertEquals("AAAAAAAAAAAAAAAA", ticket0.getId());
      assertEquals(30, ticket0.getValidity());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TicketType ticketType0 = TicketType.ONEMONTHPASS;
      Ticket ticket0 = new Ticket((-2400), ticketType0);
      ticket0.setType((TicketType) null);
      ticket0.getType();
      assertEquals(30, ticket0.getValidity());
      assertEquals((-2400), ticket0.getPrice());
      assertEquals("days", ticket0.getLenght());
      assertEquals("AAAAAAAAAAAAAAAA", ticket0.getId());
      assertFalse(ticket0.isActivated());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TicketType ticketType0 = TicketType.WEEKPASS;
      Ticket ticket0 = new Ticket(321, ticketType0);
      ZonedDateTime zonedDateTime0 = ticket0.getValidationTime();
      assertEquals(321, ticket0.getPrice());
      assertFalse(ticket0.isActivated());
      assertEquals("AAAAAAAAAAAAAAAA", ticket0.getId());
      assertNull(zonedDateTime0);
      assertEquals("days", ticket0.getLenght());
      assertEquals(7, ticket0.getValidity());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TicketType ticketType0 = TicketType.ONEMONTHPASS;
      Ticket ticket0 = new Ticket(0, ticketType0);
      boolean boolean0 = ticket0.isActivated();
      assertEquals(30, ticket0.getValidity());
      assertEquals("days", ticket0.getLenght());
      assertFalse(boolean0);
      assertEquals(0, ticket0.getPrice());
      assertEquals("AAAAAAAAAAAAAAAA", ticket0.getId());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TicketType ticketType0 = TicketType.ONEMONTHPASS;
      Ticket ticket0 = new Ticket(1773, ticketType0);
      ZonedDateTime zonedDateTime0 = ticket0.getPurchase();
      assertNotNull(zonedDateTime0);
      
      ticket0.setValidationTime(zonedDateTime0);
      assertFalse(ticket0.isActivated());
      assertEquals("AAAAAAAAAAAAAAAA", ticket0.getId());
      assertEquals(30, ticket0.getValidity());
      assertEquals(1773, ticket0.getPrice());
      assertEquals("days", ticket0.getLenght());
  }
}
