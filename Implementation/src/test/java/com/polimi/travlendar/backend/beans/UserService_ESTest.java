/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 05 22:27:58 GMT 2018
 */

package com.polimi.travlendar.backend.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.polimi.travlendar.backend.beans.UserService;
import com.polimi.travlendar.backend.model.user.PreferenceLevel;
import com.polimi.travlendar.backend.model.user.User;
import com.polimi.travlendar.backend.model.user.UserSettings;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.jdbc.core.JdbcTemplate;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserService_ESTest extends UserService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UserService userService0 = new UserService();
      assertNotNull(userService0);
      
      PreferenceLevel preferenceLevel0 = PreferenceLevel.MEDIUM;
      UserSettings userSettings0 = new UserSettings(preferenceLevel0, preferenceLevel0, (-1319), false, false, false);
      assertNotNull(userSettings0);
      assertFalse(userSettings0.isBikeAvailability());
      assertEquals((-1319), userSettings0.getMaxWalkingDistance());
      assertEquals(PreferenceLevel.MEDIUM, userSettings0.getBikePreference());
      assertFalse(userSettings0.isDrivingLicense());
      assertFalse(userSettings0.isCarAvailability());
      assertEquals(PreferenceLevel.MEDIUM, userSettings0.getCarPreference());
      
      JdbcTemplate jdbcTemplate0 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn("))bS$hX1beAwEz+J5").when(jdbcTemplate0).queryForObject(anyString() , any(java.lang.Object[].class) , any(org.springframework.jdbc.core.RowMapper.class));
      doReturn(6).when(jdbcTemplate0).update(anyString() , any(java.lang.Object[].class));
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      assertFalse(userSettings0.isBikeAvailability());
      assertEquals((-1319), userSettings0.getMaxWalkingDistance());
      assertEquals(PreferenceLevel.MEDIUM, userSettings0.getBikePreference());
      assertFalse(userSettings0.isDrivingLicense());
      assertFalse(userSettings0.isCarAvailability());
      assertEquals(PreferenceLevel.MEDIUM, userSettings0.getCarPreference());
      
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      User user0 = new User((String) null, (String) null, (String) null, (String) null);
      assertNotNull(user0);
      assertEquals((-1L), (long)user0.getId());
      assertNull(user0.getFirst_name());
      assertNull(user0.getEmail());
      assertEquals("", user0.getStripeId());
      assertNull(user0.getLast_name());
      assertNull(user0.getPassword());
      assertEquals(0L, (long)user0.getBalance());
      
      UserService userService1 = new UserService();
      assertFalse(userService1.equals((Object)userService0));
      assertNotNull(userService1);
      
      JdbcTemplate jdbcTemplate1 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jdbcTemplate1).queryForObject(anyString() , any(java.lang.Object[].class) , any(java.lang.Class.class));
      doReturn(userSettings0).when(jdbcTemplate1).queryForObject(anyString() , any(java.lang.Object[].class) , any(org.springframework.jdbc.core.RowMapper.class));
      doReturn(873).when(jdbcTemplate1).update(anyString() , any(java.lang.Object[].class));
      Injector.inject(userService1, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate1);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      assertFalse(userSettings0.isBikeAvailability());
      assertEquals((-1319), userSettings0.getMaxWalkingDistance());
      assertEquals(PreferenceLevel.MEDIUM, userSettings0.getBikePreference());
      assertFalse(userSettings0.isDrivingLicense());
      assertFalse(userSettings0.isCarAvailability());
      assertEquals(PreferenceLevel.MEDIUM, userSettings0.getCarPreference());
      
      Injector.validateBean(userService1, (Class<?>) UserService.class);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      UserSettings userSettings1 = userService1.getPreferences(long0);
      assertFalse(userService1.equals((Object)userService0));
      assertNotNull(userSettings1);
      assertNotSame(userService1, userService0);
      assertSame(userSettings1, userSettings0);
      assertFalse(userSettings1.isCarAvailability());
      assertFalse(userSettings1.isBikeAvailability());
      assertEquals(PreferenceLevel.MEDIUM, userSettings1.getCarPreference());
      assertEquals((-1319), userSettings1.getMaxWalkingDistance());
      assertEquals(PreferenceLevel.MEDIUM, userSettings1.getBikePreference());
      assertFalse(userSettings1.isDrivingLicense());
      
      userService1.addPreferences((String) null);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService1);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      assertEquals((-1L), (long)user0.getId());
      assertNull(user0.getFirst_name());
      assertNull(user0.getEmail());
      assertEquals("", user0.getStripeId());
      assertNull(user0.getLast_name());
      assertNull(user0.getPassword());
      assertEquals(0L, (long)user0.getBalance());
      
      Injector.validateBean(user0, (Class<?>) User.class);
      assertEquals((-1L), (long)user0.getId());
      assertNull(user0.getFirst_name());
      assertNull(user0.getEmail());
      assertEquals("", user0.getStripeId());
      assertNull(user0.getLast_name());
      assertNull(user0.getPassword());
      assertEquals(0L, (long)user0.getBalance());
      
      userService0.updateUser(user0);
      assertFalse(userService0.equals((Object)userService1));
      assertNotSame(userService0, userService1);
      assertEquals((-1L), (long)user0.getId());
      assertNull(user0.getFirst_name());
      assertNull(user0.getEmail());
      assertEquals("", user0.getStripeId());
      assertNull(user0.getLast_name());
      assertNull(user0.getPassword());
      assertEquals(0L, (long)user0.getBalance());
      
      // Undeclared exception!
      try { 
        userService0.getUser("|k=*gY,2iO_", ">5|\"UM*WGS61?{U");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.polimi.travlendar.backend.model.user.User
         //
         verifyException("com.polimi.travlendar.backend.beans.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserService userService0 = new UserService();
      assertNotNull(userService0);
      
      Integer integer0 = new Integer(3546);
      assertEquals(3546, (int)integer0);
      assertNotNull(integer0);
      
      PreferenceLevel preferenceLevel0 = PreferenceLevel.MEDIUM;
      PreferenceLevel preferenceLevel1 = PreferenceLevel.LOW;
      UserSettings userSettings0 = new UserSettings(preferenceLevel0, preferenceLevel1, 3546, true, true, true);
      assertFalse(preferenceLevel0.equals((Object)preferenceLevel1));
      assertFalse(preferenceLevel1.equals((Object)preferenceLevel0));
      assertNotNull(userSettings0);
      assertEquals(PreferenceLevel.LOW, userSettings0.getCarPreference());
      assertEquals(PreferenceLevel.MEDIUM, userSettings0.getBikePreference());
      assertTrue(userSettings0.isCarAvailability());
      assertTrue(userSettings0.isBikeAvailability());
      assertEquals(3546, userSettings0.getMaxWalkingDistance());
      assertTrue(userSettings0.isDrivingLicense());
      
      JdbcTemplate jdbcTemplate0 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn("SELECT * FROM user_settings WHERE id =? ").when(jdbcTemplate0).queryForObject(anyString() , any(java.lang.Object[].class) , any(java.lang.Class.class));
      doReturn(5).when(jdbcTemplate0).update(anyString() , any(java.lang.Object[].class));
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      User user0 = new User((String) null, (String) null, (String) null, (String) null);
      assertNotNull(user0);
      assertEquals(0L, (long)user0.getBalance());
      assertNull(user0.getLast_name());
      assertNull(user0.getPassword());
      assertNull(user0.getFirst_name());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("", user0.getStripeId());
      assertNull(user0.getEmail());
      
      UserService userService1 = new UserService();
      assertFalse(userService1.equals((Object)userService0));
      assertNotNull(userService1);
      
      JdbcTemplate jdbcTemplate1 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(jdbcTemplate1).queryForObject(anyString() , any(java.lang.Object[].class) , any(java.lang.Class.class));
      doReturn(userSettings0).when(jdbcTemplate1).queryForObject(anyString() , any(java.lang.Object[].class) , any(org.springframework.jdbc.core.RowMapper.class));
      doReturn(0).when(jdbcTemplate1).update(anyString() , any(java.lang.Object[].class));
      Injector.inject(userService1, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate1);
      assertFalse(preferenceLevel0.equals((Object)preferenceLevel1));
      assertFalse(preferenceLevel1.equals((Object)preferenceLevel0));
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(preferenceLevel0, preferenceLevel1);
      assertNotSame(preferenceLevel1, preferenceLevel0);
      assertNotSame(userService1, userService0);
      assertEquals(PreferenceLevel.LOW, userSettings0.getCarPreference());
      assertEquals(PreferenceLevel.MEDIUM, userSettings0.getBikePreference());
      assertTrue(userSettings0.isCarAvailability());
      assertTrue(userSettings0.isBikeAvailability());
      assertEquals(3546, userSettings0.getMaxWalkingDistance());
      assertTrue(userSettings0.isDrivingLicense());
      
      Injector.validateBean(userService1, (Class<?>) UserService.class);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      UserSettings userSettings1 = userService1.getPreferences(long0);
      assertFalse(userService1.equals((Object)userService0));
      assertNotNull(userSettings1);
      assertNotSame(userService1, userService0);
      assertSame(userSettings1, userSettings0);
      assertEquals(PreferenceLevel.LOW, userSettings1.getCarPreference());
      assertTrue(userSettings1.isDrivingLicense());
      assertEquals(PreferenceLevel.MEDIUM, userSettings1.getBikePreference());
      assertEquals(3546, userSettings1.getMaxWalkingDistance());
      assertTrue(userSettings1.isCarAvailability());
      assertTrue(userSettings1.isBikeAvailability());
      
      userService1.addPreferences((String) null);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService1);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      assertEquals(0L, (long)user0.getBalance());
      assertNull(user0.getLast_name());
      assertNull(user0.getPassword());
      assertNull(user0.getFirst_name());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("", user0.getStripeId());
      assertNull(user0.getEmail());
      
      Injector.validateBean(user0, (Class<?>) User.class);
      assertEquals(0L, (long)user0.getBalance());
      assertNull(user0.getLast_name());
      assertNull(user0.getPassword());
      assertNull(user0.getFirst_name());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("", user0.getStripeId());
      assertNull(user0.getEmail());
      
      userService0.updateUser(user0);
      assertFalse(userService0.equals((Object)userService1));
      assertNotSame(userService0, userService1);
      assertEquals(0L, (long)user0.getBalance());
      assertNull(user0.getLast_name());
      assertNull(user0.getPassword());
      assertNull(user0.getFirst_name());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("", user0.getStripeId());
      assertNull(user0.getEmail());
      
      // Undeclared exception!
      try { 
        userService0.addPreferences("SELECT id FROM users WHERE email=?");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Long
         //
         verifyException("com.polimi.travlendar.backend.beans.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UserService userService0 = new UserService();
      assertNotNull(userService0);
      
      PreferenceLevel preferenceLevel0 = PreferenceLevel.HIGH;
      UserSettings userSettings0 = new UserSettings(preferenceLevel0, preferenceLevel0, 0, false, false, true);
      assertNotNull(userSettings0);
      assertEquals(0, userSettings0.getMaxWalkingDistance());
      assertEquals(PreferenceLevel.HIGH, userSettings0.getCarPreference());
      assertEquals(PreferenceLevel.HIGH, userSettings0.getBikePreference());
      assertFalse(userSettings0.isBikeAvailability());
      assertTrue(userSettings0.isDrivingLicense());
      assertFalse(userSettings0.isCarAvailability());
      
      JdbcTemplate jdbcTemplate0 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn(userSettings0).when(jdbcTemplate0).queryForObject(anyString() , any(java.lang.Object[].class) , any(java.lang.Class.class));
      doReturn(2297).when(jdbcTemplate0).update(anyString() , any(java.lang.Object[].class));
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      assertEquals(0, userSettings0.getMaxWalkingDistance());
      assertEquals(PreferenceLevel.HIGH, userSettings0.getCarPreference());
      assertEquals(PreferenceLevel.HIGH, userSettings0.getBikePreference());
      assertFalse(userSettings0.isBikeAvailability());
      assertTrue(userSettings0.isDrivingLicense());
      assertFalse(userSettings0.isCarAvailability());
      
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      User user0 = new User((String) null, (String) null, (String) null, (String) null);
      assertNotNull(user0);
      assertNull(user0.getPassword());
      assertNull(user0.getLast_name());
      assertEquals("", user0.getStripeId());
      assertNull(user0.getEmail());
      assertNull(user0.getFirst_name());
      assertEquals((-1L), (long)user0.getId());
      assertEquals(0L, (long)user0.getBalance());
      
      UserService userService1 = new UserService();
      assertFalse(userService1.equals((Object)userService0));
      assertNotNull(userService1);
      
      JdbcTemplate jdbcTemplate1 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(jdbcTemplate1).queryForObject(anyString() , any(java.lang.Object[].class) , any(java.lang.Class.class));
      doReturn(userSettings0).when(jdbcTemplate1).queryForObject(anyString() , any(java.lang.Object[].class) , any(org.springframework.jdbc.core.RowMapper.class));
      doReturn(2297).when(jdbcTemplate1).update(anyString() , any(java.lang.Object[].class));
      Injector.inject(userService1, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate1);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      assertEquals(0, userSettings0.getMaxWalkingDistance());
      assertEquals(PreferenceLevel.HIGH, userSettings0.getCarPreference());
      assertEquals(PreferenceLevel.HIGH, userSettings0.getBikePreference());
      assertFalse(userSettings0.isBikeAvailability());
      assertTrue(userSettings0.isDrivingLicense());
      assertFalse(userSettings0.isCarAvailability());
      
      Injector.validateBean(userService1, (Class<?>) UserService.class);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      UserSettings userSettings1 = userService1.getPreferences(long0);
      assertFalse(userService1.equals((Object)userService0));
      assertNotNull(userSettings1);
      assertNotSame(userService1, userService0);
      assertSame(userSettings1, userSettings0);
      assertTrue(userSettings1.isDrivingLicense());
      assertEquals(0, userSettings1.getMaxWalkingDistance());
      assertFalse(userSettings1.isCarAvailability());
      assertEquals(PreferenceLevel.HIGH, userSettings1.getCarPreference());
      assertFalse(userSettings1.isBikeAvailability());
      assertEquals(PreferenceLevel.HIGH, userSettings1.getBikePreference());
      
      userService1.addPreferences((String) null);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService1);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      assertNull(user0.getPassword());
      assertNull(user0.getLast_name());
      assertEquals("", user0.getStripeId());
      assertNull(user0.getEmail());
      assertNull(user0.getFirst_name());
      assertEquals((-1L), (long)user0.getId());
      assertEquals(0L, (long)user0.getBalance());
      
      Injector.validateBean(user0, (Class<?>) User.class);
      assertNull(user0.getPassword());
      assertNull(user0.getLast_name());
      assertEquals("", user0.getStripeId());
      assertNull(user0.getEmail());
      assertNull(user0.getFirst_name());
      assertEquals((-1L), (long)user0.getId());
      assertEquals(0L, (long)user0.getBalance());
      
      userService0.updateUser(user0);
      assertFalse(userService0.equals((Object)userService1));
      assertNotSame(userService0, userService1);
      assertNull(user0.getPassword());
      assertNull(user0.getLast_name());
      assertEquals("", user0.getStripeId());
      assertNull(user0.getEmail());
      assertNull(user0.getFirst_name());
      assertEquals((-1L), (long)user0.getId());
      assertEquals(0L, (long)user0.getBalance());
      
      userSettings1.setBikePreference(preferenceLevel0);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      assertSame(userSettings1, userSettings0);
      assertTrue(userSettings1.isDrivingLicense());
      assertEquals(0, userSettings1.getMaxWalkingDistance());
      assertFalse(userSettings1.isCarAvailability());
      assertEquals(PreferenceLevel.HIGH, userSettings1.getCarPreference());
      assertFalse(userSettings1.isBikeAvailability());
      assertEquals(PreferenceLevel.HIGH, userSettings1.getBikePreference());
      
      // Undeclared exception!
      try { 
        userService0.addPreferences("_id");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.polimi.travlendar.backend.model.user.UserSettings cannot be cast to java.lang.Long
         //
         verifyException("com.polimi.travlendar.backend.beans.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UserService userService0 = new UserService();
      assertNotNull(userService0);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-1L));
      assertEquals((-1L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      User user0 = new User(long1, "(Lorg/vaadin/addon/calendar/ui/CalendarComponentEvents$ItemClickEvent;)V", "(Lorg/vaadin/addon/calendar/ui/CalendarComponentEvents$ItemClickEvent;)V", "L#/^4h-KawBE1ik1A", "g");
      assertTrue(long1.equals((Object)long0));
      assertNotNull(user0);
      assertNull(user0.getStripeId());
      assertEquals("L#/^4h-KawBE1ik1A", user0.getFirst_name());
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("(Lorg/vaadin/addon/calendar/ui/CalendarComponentEvents$ItemClickEvent;)V", user0.getPassword());
      assertEquals("g", user0.getLast_name());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("(Lorg/vaadin/addon/calendar/ui/CalendarComponentEvents$ItemClickEvent;)V", user0.getEmail());
      
      JdbcTemplate jdbcTemplate0 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jdbcTemplate0).queryForObject(anyString() , any(java.lang.Object[].class) , any(java.lang.Class.class));
      doReturn(0, 0).when(jdbcTemplate0).update(anyString() , any(java.lang.Object[].class));
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      User user1 = new User((String) null, (String) null, (String) null, (String) null);
      assertFalse(user1.equals((Object)user0));
      assertNotNull(user1);
      assertNull(user1.getLast_name());
      assertNull(user1.getPassword());
      assertEquals(0L, (long)user1.getBalance());
      assertNull(user1.getFirst_name());
      assertEquals((-1L), (long)user1.getId());
      assertNull(user1.getEmail());
      assertEquals("", user1.getStripeId());
      
      UserService userService1 = new UserService();
      assertFalse(userService1.equals((Object)userService0));
      assertNotNull(userService1);
      
      JdbcTemplate jdbcTemplate1 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jdbcTemplate1).queryForObject(anyString() , any(java.lang.Object[].class) , any(java.lang.Class.class));
      doReturn((Object) null).when(jdbcTemplate1).queryForObject(anyString() , any(java.lang.Object[].class) , any(org.springframework.jdbc.core.RowMapper.class));
      doReturn(0).when(jdbcTemplate1).update(anyString() , any(java.lang.Object[].class));
      Injector.inject(userService1, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate1);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      
      Injector.validateBean(userService1, (Class<?>) UserService.class);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      
      Long long2 = new Long((-1L));
      assertEquals((-1L), (long)long2);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      
      UserSettings userSettings0 = userService1.getPreferences(long2);
      assertFalse(userService1.equals((Object)userService0));
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNull(userSettings0);
      assertNotSame(userService1, userService0);
      
      userService1.addPreferences((String) null);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      
      Injector.inject(user1, (Class<?>) User.class, "service", (Object) userService1);
      assertFalse(user1.equals((Object)user0));
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(user1, user0);
      assertNotSame(userService1, userService0);
      assertNull(user1.getLast_name());
      assertNull(user1.getPassword());
      assertEquals(0L, (long)user1.getBalance());
      assertNull(user1.getFirst_name());
      assertEquals((-1L), (long)user1.getId());
      assertNull(user1.getEmail());
      assertEquals("", user1.getStripeId());
      
      Injector.validateBean(user1, (Class<?>) User.class);
      assertFalse(user1.equals((Object)user0));
      assertNotSame(user1, user0);
      assertNull(user1.getLast_name());
      assertNull(user1.getPassword());
      assertEquals(0L, (long)user1.getBalance());
      assertNull(user1.getFirst_name());
      assertEquals((-1L), (long)user1.getId());
      assertNull(user1.getEmail());
      assertEquals("", user1.getStripeId());
      
      userService0.updateUser(user1);
      assertFalse(userService0.equals((Object)userService1));
      assertFalse(user1.equals((Object)user0));
      assertNotSame(userService0, userService1);
      assertNotSame(user1, user0);
      assertNull(user1.getLast_name());
      assertNull(user1.getPassword());
      assertEquals(0L, (long)user1.getBalance());
      assertNull(user1.getFirst_name());
      assertEquals((-1L), (long)user1.getId());
      assertNull(user1.getEmail());
      assertEquals("", user1.getStripeId());
      
      userService0.addPreferences("SELECT id FROM users WHERE email=?");
      assertFalse(userService0.equals((Object)userService1));
      assertNotSame(userService0, userService1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UserService userService0 = new UserService();
      assertNotNull(userService0);
      
      User user0 = new User();
      assertNotNull(user0);
      assertEquals("", user0.getPassword());
      assertEquals("", user0.getLast_name());
      assertEquals("", user0.getStripeId());
      assertEquals("", user0.getEmail());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("", user0.getFirst_name());
      assertEquals(0L, (long)user0.getBalance());
      
      User user1 = new User("Ki", "Ki");
      assertFalse(user1.equals((Object)user0));
      assertNotNull(user1);
      assertEquals(0L, (long)user1.getBalance());
      assertEquals("Ki", user1.getPassword());
      assertEquals("", user1.getLast_name());
      assertEquals("", user1.getFirst_name());
      assertEquals("", user1.getStripeId());
      assertEquals((-1L), (long)user1.getId());
      assertEquals("Ki", user1.getEmail());
      
      JdbcTemplate jdbcTemplate0 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(jdbcTemplate0).queryForObject(anyString() , any(java.lang.Object[].class) , any(java.lang.Class.class));
      doReturn((Object) null).when(jdbcTemplate0).queryForObject(anyString() , any(java.lang.Object[].class) , any(org.springframework.jdbc.core.RowMapper.class));
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      boolean boolean0 = userService0.check("PJG<");
      assertFalse(boolean0);
      
      User user2 = new User("PJG<", "", "9rIf5UzK~ aV1nk", "9rIf5UzK~ aV1nk");
      assertFalse(user2.equals((Object)user0));
      assertFalse(user2.equals((Object)user1));
      assertNotNull(user2);
      assertEquals(0L, (long)user2.getBalance());
      assertEquals("PJG<", user2.getEmail());
      assertEquals("", user2.getPassword());
      assertEquals("9rIf5UzK~ aV1nk", user2.getLast_name());
      assertEquals("9rIf5UzK~ aV1nk", user2.getFirst_name());
      assertEquals((-1L), (long)user2.getId());
      assertEquals("", user2.getStripeId());
      
      UserService userService1 = new UserService();
      assertFalse(userService1.equals((Object)userService0));
      assertNotNull(userService1);
      
      JdbcTemplate jdbcTemplate1 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jdbcTemplate1).queryForObject(anyString() , any(java.lang.Object[].class) , any(java.lang.Class.class));
      Injector.inject(userService1, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate1);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      
      Injector.validateBean(userService1, (Class<?>) UserService.class);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      
      boolean boolean1 = userService0.check("");
      assertFalse(boolean1);
      assertFalse(userService0.equals((Object)userService1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(userService0, userService1);
      
      boolean boolean2 = userService1.check((String) null);
      assertFalse(boolean2);
      assertFalse(userService1.equals((Object)userService0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(userService1, userService0);
      
      User user3 = userService0.getUser("", "m+DhV");
      assertFalse(userService0.equals((Object)userService1));
      assertNull(user3);
      assertNotSame(userService0, userService1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UserService userService0 = new UserService();
      assertNotNull(userService0);
      
      User user0 = new User("r?Uw,W707UMwoZ]HmSu", "?0P8K", "/", "/");
      assertNotNull(user0);
      assertEquals("/", user0.getFirst_name());
      assertEquals("?0P8K", user0.getPassword());
      assertEquals("r?Uw,W707UMwoZ]HmSu", user0.getEmail());
      assertEquals((-1L), (long)user0.getId());
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("", user0.getStripeId());
      assertEquals("/", user0.getLast_name());
      
      JdbcTemplate jdbcTemplate0 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(jdbcTemplate0).queryForObject(anyString() , any(java.lang.Object[].class) , any(org.springframework.jdbc.core.RowMapper.class));
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      User user1 = userService0.getUser("", "");
      assertNull(user1);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      long long1 = Long.min(1L, 1641L);
      assertEquals(1L, long1);
      
      int int0 = Long.compareUnsigned(1295L, 1295L);
      assertEquals(0, int0);
      
      UserSettings userSettings0 = userService0.getPreferences(long0);
      assertTrue(long0.equals((Object)long1));
      assertNull(userSettings0);
      
      User user2 = new User("Gy|+WQYzQ/*@;}", "");
      assertFalse(user2.equals((Object)user0));
      assertNotNull(user2);
      assertEquals("", user2.getFirst_name());
      assertEquals((-1L), (long)user2.getId());
      assertEquals(0L, (long)user2.getBalance());
      assertEquals("", user2.getLast_name());
      assertEquals("", user2.getStripeId());
      assertEquals("", user2.getPassword());
      assertEquals("Gy|+WQYzQ/*@;}", user2.getEmail());
      
      UserService userService1 = new UserService();
      assertFalse(userService1.equals((Object)userService0));
      assertNotNull(userService1);
      
      JdbcTemplate jdbcTemplate1 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jdbcTemplate1).queryForObject(anyString() , any(java.lang.Object[].class) , any(org.springframework.jdbc.core.RowMapper.class));
      Injector.inject(userService1, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate1);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      
      Injector.validateBean(userService1, (Class<?>) UserService.class);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      
      UserSettings userSettings1 = userService1.getPreferences(long0);
      assertTrue(long0.equals((Object)long1));
      assertFalse(userService1.equals((Object)userService0));
      assertNull(userSettings1);
      assertNotSame(userService1, userService0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UserService userService0 = new UserService();
      assertNotNull(userService0);
      
      Integer integer0 = new Integer(886);
      assertEquals(886, (int)integer0);
      assertNotNull(integer0);
      
      User user0 = new User("r?Uw,W707UMwoZ]HmSu", "SELECT password FROM users WHERE email=?");
      assertNotNull(user0);
      assertEquals("", user0.getLast_name());
      assertEquals("r?Uw,W707UMwoZ]HmSu", user0.getEmail());
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("", user0.getStripeId());
      assertEquals("SELECT password FROM users WHERE email=?", user0.getPassword());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("", user0.getFirst_name());
      
      JdbcTemplate jdbcTemplate0 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(jdbcTemplate0).queryForObject(anyString() , any(java.lang.Object[].class) , any(java.lang.Class.class));
      doReturn((Object) null, (Object) null).when(jdbcTemplate0).queryForObject(anyString() , any(java.lang.Object[].class) , any(org.springframework.jdbc.core.RowMapper.class));
      doReturn(0).when(jdbcTemplate0).update(anyString() , any(java.lang.Object[].class));
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong("height", 0L);
      assertEquals(0L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      UserSettings userSettings0 = userService0.getPreferences(long0);
      assertTrue(long0.equals((Object)long1));
      assertNull(userSettings0);
      
      boolean boolean0 = userService0.check("");
      assertFalse(boolean0);
      
      userService0.addPreferences("");
      User user1 = new User("", "SELECT * FROM user_settings WHERE id =? ");
      assertFalse(user1.equals((Object)user0));
      assertNotNull(user1);
      assertEquals((-1L), (long)user1.getId());
      assertEquals("", user1.getFirst_name());
      assertEquals(0L, (long)user1.getBalance());
      assertEquals("", user1.getLast_name());
      assertEquals("", user1.getStripeId());
      assertEquals("SELECT * FROM user_settings WHERE id =? ", user1.getPassword());
      assertEquals("", user1.getEmail());
      
      UserService userService1 = new UserService();
      assertFalse(userService1.equals((Object)userService0));
      assertNotNull(userService1);
      
      Long long2 = new Long(0L);
      assertEquals(0L, (long)long2);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      
      UserSettings userSettings1 = userService0.getPreferences(long2);
      assertFalse(userService0.equals((Object)userService1));
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNull(userSettings1);
      assertNotSame(userService0, userService1);
      
      // Undeclared exception!
      try { 
        userService1.check((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.travlendar.backend.beans.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UserService userService0 = new UserService();
      assertNotNull(userService0);
      
      Integer integer0 = new Integer(308);
      assertEquals(308, (int)integer0);
      assertNotNull(integer0);
      
      JdbcTemplate jdbcTemplate0 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn("Executing prepared SQL update").when(jdbcTemplate0).queryForObject(anyString() , any(java.lang.Object[].class) , any(java.lang.Class.class));
      doReturn((-1874)).when(jdbcTemplate0).update(anyString() , any(java.lang.Object[].class));
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      User user0 = new User((String) null, (String) null, (String) null, (String) null);
      assertNotNull(user0);
      assertNull(user0.getPassword());
      assertNull(user0.getLast_name());
      assertEquals(0L, (long)user0.getBalance());
      assertNull(user0.getFirst_name());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("", user0.getStripeId());
      assertNull(user0.getEmail());
      
      UserService userService1 = new UserService();
      assertFalse(userService1.equals((Object)userService0));
      assertNotNull(userService1);
      
      UserSettings userSettings0 = new UserSettings();
      assertNotNull(userSettings0);
      assertNull(userSettings0.getCarPreference());
      assertEquals(0, userSettings0.getMaxWalkingDistance());
      assertFalse(userSettings0.isBikeAvailability());
      assertFalse(userSettings0.isCarAvailability());
      assertFalse(userSettings0.isDrivingLicense());
      assertNull(userSettings0.getBikePreference());
      
      JdbcTemplate jdbcTemplate1 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jdbcTemplate1).queryForObject(anyString() , any(java.lang.Object[].class) , any(java.lang.Class.class));
      doReturn(userSettings0).when(jdbcTemplate1).queryForObject(anyString() , any(java.lang.Object[].class) , any(org.springframework.jdbc.core.RowMapper.class));
      doReturn((-1874)).when(jdbcTemplate1).update(anyString() , any(java.lang.Object[].class));
      Injector.inject(userService1, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate1);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      assertNull(userSettings0.getCarPreference());
      assertEquals(0, userSettings0.getMaxWalkingDistance());
      assertFalse(userSettings0.isBikeAvailability());
      assertFalse(userSettings0.isCarAvailability());
      assertFalse(userSettings0.isDrivingLicense());
      assertNull(userSettings0.getBikePreference());
      
      Injector.validateBean(userService1, (Class<?>) UserService.class);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      UserSettings userSettings1 = userService1.getPreferences(long0);
      assertFalse(userService1.equals((Object)userService0));
      assertNotNull(userSettings1);
      assertNotSame(userService1, userService0);
      assertSame(userSettings1, userSettings0);
      assertNull(userSettings1.getCarPreference());
      assertFalse(userSettings1.isDrivingLicense());
      assertNull(userSettings1.getBikePreference());
      assertFalse(userSettings1.isCarAvailability());
      assertEquals(0, userSettings1.getMaxWalkingDistance());
      assertFalse(userSettings1.isBikeAvailability());
      
      userService1.addPreferences((String) null);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService1);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      assertNull(user0.getPassword());
      assertNull(user0.getLast_name());
      assertEquals(0L, (long)user0.getBalance());
      assertNull(user0.getFirst_name());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("", user0.getStripeId());
      assertNull(user0.getEmail());
      
      Injector.validateBean(user0, (Class<?>) User.class);
      assertNull(user0.getPassword());
      assertNull(user0.getLast_name());
      assertEquals(0L, (long)user0.getBalance());
      assertNull(user0.getFirst_name());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("", user0.getStripeId());
      assertNull(user0.getEmail());
      
      userService0.updateUser(user0);
      assertFalse(userService0.equals((Object)userService1));
      assertNotSame(userService0, userService1);
      assertNull(user0.getPassword());
      assertNull(user0.getLast_name());
      assertEquals(0L, (long)user0.getBalance());
      assertNull(user0.getFirst_name());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("", user0.getStripeId());
      assertNull(user0.getEmail());
      
      // Undeclared exception!
      try { 
        userService0.addPreferences("SELECT id FROM users WHERE email=?");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Long
         //
         verifyException("com.polimi.travlendar.backend.beans.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UserService userService0 = new UserService();
      assertNotNull(userService0);
      
      PreferenceLevel preferenceLevel0 = PreferenceLevel.MEDIUM;
      UserSettings userSettings0 = new UserSettings(preferenceLevel0, preferenceLevel0, 7, true, false, false);
      assertNotNull(userSettings0);
      assertEquals(7, userSettings0.getMaxWalkingDistance());
      assertEquals(PreferenceLevel.MEDIUM, userSettings0.getCarPreference());
      assertFalse(userSettings0.isBikeAvailability());
      assertEquals(PreferenceLevel.MEDIUM, userSettings0.getBikePreference());
      assertFalse(userSettings0.isDrivingLicense());
      assertTrue(userSettings0.isCarAvailability());
      
      Integer integer0 = new Integer(11);
      assertEquals(11, (int)integer0);
      assertNotNull(integer0);
      
      JdbcTemplate jdbcTemplate0 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      assertEquals(7, userSettings0.getMaxWalkingDistance());
      assertEquals(PreferenceLevel.MEDIUM, userSettings0.getCarPreference());
      assertFalse(userSettings0.isBikeAvailability());
      assertEquals(PreferenceLevel.MEDIUM, userSettings0.getBikePreference());
      assertFalse(userSettings0.isDrivingLicense());
      assertTrue(userSettings0.isCarAvailability());
      
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      User user0 = new User((String) null, (String) null, (String) null, (String) null);
      assertNotNull(user0);
      assertNull(user0.getPassword());
      assertNull(user0.getLast_name());
      assertEquals(0L, (long)user0.getBalance());
      assertNull(user0.getFirst_name());
      assertNull(user0.getEmail());
      assertEquals("", user0.getStripeId());
      assertEquals((-1L), (long)user0.getId());
      
      UserService userService1 = new UserService();
      assertFalse(userService1.equals((Object)userService0));
      assertNotNull(userService1);
      
      JdbcTemplate jdbcTemplate1 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn(userSettings0).when(jdbcTemplate1).queryForObject(anyString() , any(java.lang.Object[].class) , any(java.lang.Class.class));
      doReturn(userSettings0).when(jdbcTemplate1).queryForObject(anyString() , any(java.lang.Object[].class) , any(org.springframework.jdbc.core.RowMapper.class));
      Injector.inject(userService1, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate1);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      assertEquals(7, userSettings0.getMaxWalkingDistance());
      assertEquals(PreferenceLevel.MEDIUM, userSettings0.getCarPreference());
      assertFalse(userSettings0.isBikeAvailability());
      assertEquals(PreferenceLevel.MEDIUM, userSettings0.getBikePreference());
      assertFalse(userSettings0.isDrivingLicense());
      assertTrue(userSettings0.isCarAvailability());
      
      Injector.validateBean(userService1, (Class<?>) UserService.class);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      UserSettings userSettings1 = userService1.getPreferences(long0);
      assertFalse(userService1.equals((Object)userService0));
      assertNotNull(userSettings1);
      assertNotSame(userService1, userService0);
      assertSame(userSettings1, userSettings0);
      assertEquals(7, userSettings1.getMaxWalkingDistance());
      assertTrue(userSettings1.isCarAvailability());
      assertFalse(userSettings1.isDrivingLicense());
      assertEquals(PreferenceLevel.MEDIUM, userSettings1.getCarPreference());
      assertFalse(userSettings1.isBikeAvailability());
      assertEquals(PreferenceLevel.MEDIUM, userSettings1.getBikePreference());
      
      // Undeclared exception!
      try { 
        userService1.addPreferences((String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.polimi.travlendar.backend.model.user.UserSettings cannot be cast to java.lang.Long
         //
         verifyException("com.polimi.travlendar.backend.beans.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UserService userService0 = new UserService();
      assertNotNull(userService0);
      
      UserSettings userSettings0 = new UserSettings();
      assertNotNull(userSettings0);
      assertFalse(userSettings0.isDrivingLicense());
      assertNull(userSettings0.getBikePreference());
      assertEquals(0, userSettings0.getMaxWalkingDistance());
      assertNull(userSettings0.getCarPreference());
      assertFalse(userSettings0.isCarAvailability());
      assertFalse(userSettings0.isBikeAvailability());
      
      PreferenceLevel preferenceLevel0 = PreferenceLevel.LOW;
      userSettings0.setBikePreference(preferenceLevel0);
      assertFalse(userSettings0.isDrivingLicense());
      assertEquals(0, userSettings0.getMaxWalkingDistance());
      assertNull(userSettings0.getCarPreference());
      assertFalse(userSettings0.isCarAvailability());
      assertEquals(PreferenceLevel.LOW, userSettings0.getBikePreference());
      assertFalse(userSettings0.isBikeAvailability());
      
      JdbcTemplate jdbcTemplate0 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn(userSettings0, (Object) null).when(jdbcTemplate0).queryForObject(anyString() , any(java.lang.Object[].class) , any(java.lang.Class.class));
      doReturn(308, 308, 308).when(jdbcTemplate0).update(anyString() , any(java.lang.Object[].class));
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      assertFalse(userSettings0.isDrivingLicense());
      assertEquals(0, userSettings0.getMaxWalkingDistance());
      assertNull(userSettings0.getCarPreference());
      assertFalse(userSettings0.isCarAvailability());
      assertEquals(PreferenceLevel.LOW, userSettings0.getBikePreference());
      assertFalse(userSettings0.isBikeAvailability());
      
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      boolean boolean0 = userService0.check(":xg1iV");
      assertFalse(boolean0);
      
      User user0 = new User("", (String) null, "f\"$gf", "f\"$gf");
      assertNotNull(user0);
      assertNull(user0.getPassword());
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("", user0.getStripeId());
      assertEquals("", user0.getEmail());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("f\"$gf", user0.getFirst_name());
      assertEquals("f\"$gf", user0.getLast_name());
      
      UserService userService1 = new UserService();
      assertFalse(userService1.equals((Object)userService0));
      assertNotNull(userService1);
      
      JdbcTemplate jdbcTemplate1 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn(308).when(jdbcTemplate1).update(anyString() , any(java.lang.Object[].class));
      Injector.inject(userService1, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate1);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      
      Injector.validateBean(userService1, (Class<?>) UserService.class);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService1);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      assertNull(user0.getPassword());
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("", user0.getStripeId());
      assertEquals("", user0.getEmail());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("f\"$gf", user0.getFirst_name());
      assertEquals("f\"$gf", user0.getLast_name());
      
      Injector.validateBean(user0, (Class<?>) User.class);
      assertNull(user0.getPassword());
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("", user0.getStripeId());
      assertEquals("", user0.getEmail());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("f\"$gf", user0.getFirst_name());
      assertEquals("f\"$gf", user0.getLast_name());
      
      userService0.updateUser(user0);
      assertFalse(userService0.equals((Object)userService1));
      assertNotSame(userService0, userService1);
      assertNull(user0.getPassword());
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("", user0.getStripeId());
      assertEquals("", user0.getEmail());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("f\"$gf", user0.getFirst_name());
      assertEquals("f\"$gf", user0.getLast_name());
      
      userService1.addUser(user0);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      assertNull(user0.getPassword());
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("", user0.getStripeId());
      assertEquals("", user0.getEmail());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("f\"$gf", user0.getFirst_name());
      assertEquals("f\"$gf", user0.getLast_name());
      
      userService0.addUser(user0);
      assertFalse(userService0.equals((Object)userService1));
      assertNotSame(userService0, userService1);
      assertNull(user0.getPassword());
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("", user0.getStripeId());
      assertEquals("", user0.getEmail());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("f\"$gf", user0.getFirst_name());
      assertEquals("f\"$gf", user0.getLast_name());
      
      userService0.updateUser(user0);
      assertFalse(userService0.equals((Object)userService1));
      assertNotSame(userService0, userService1);
      assertNull(user0.getPassword());
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("", user0.getStripeId());
      assertEquals("", user0.getEmail());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("f\"$gf", user0.getFirst_name());
      assertEquals("f\"$gf", user0.getLast_name());
      
      User user1 = new User();
      assertFalse(user1.equals((Object)user0));
      assertNotNull(user1);
      assertEquals("", user1.getLast_name());
      assertEquals("", user1.getPassword());
      assertEquals("", user1.getEmail());
      assertEquals("", user1.getStripeId());
      assertEquals("", user1.getFirst_name());
      assertEquals(0L, (long)user1.getBalance());
      assertEquals((-1L), (long)user1.getId());
      
      UserService userService2 = new UserService();
      assertFalse(userService2.equals((Object)userService0));
      assertFalse(userService2.equals((Object)userService1));
      assertNotNull(userService2);
      
      JdbcTemplate jdbcTemplate2 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      Injector.inject(userService2, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate2);
      assertFalse(userService2.equals((Object)userService0));
      assertFalse(userService2.equals((Object)userService1));
      assertNotSame(userService2, userService0);
      assertNotSame(userService2, userService1);
      
      Injector.validateBean(userService2, (Class<?>) UserService.class);
      assertFalse(userService2.equals((Object)userService0));
      assertFalse(userService2.equals((Object)userService1));
      assertNotSame(userService2, userService0);
      assertNotSame(userService2, userService1);
      
      Injector.inject(user1, (Class<?>) User.class, "service", (Object) userService2);
      assertFalse(user1.equals((Object)user0));
      assertFalse(userService2.equals((Object)userService0));
      assertFalse(userService2.equals((Object)userService1));
      assertNotSame(user1, user0);
      assertNotSame(userService2, userService0);
      assertNotSame(userService2, userService1);
      assertEquals("", user1.getLast_name());
      assertEquals("", user1.getPassword());
      assertEquals("", user1.getEmail());
      assertEquals("", user1.getStripeId());
      assertEquals("", user1.getFirst_name());
      assertEquals(0L, (long)user1.getBalance());
      assertEquals((-1L), (long)user1.getId());
      
      Injector.validateBean(user1, (Class<?>) User.class);
      assertFalse(user1.equals((Object)user0));
      assertNotSame(user1, user0);
      assertEquals("", user1.getLast_name());
      assertEquals("", user1.getPassword());
      assertEquals("", user1.getEmail());
      assertEquals("", user1.getStripeId());
      assertEquals("", user1.getFirst_name());
      assertEquals(0L, (long)user1.getBalance());
      assertEquals((-1L), (long)user1.getId());
      
      // Undeclared exception!
      try { 
        userService0.authenticate(user1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UserService userService0 = new UserService();
      assertNotNull(userService0);
      
      JdbcTemplate jdbcTemplate0 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn("r?Uw,W707UMwoZ]HmSu").when(jdbcTemplate0).queryForObject(anyString() , any(java.lang.Object[].class) , any(java.lang.Class.class));
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Long long0 = new Long((-2573L));
      assertEquals((-2573L), (long)long0);
      assertNotNull(long0);
      
      User user0 = new User(long0, (String) null, "B~|kG48sNB9k", "B~|kG48sNB9k", "Low");
      assertNotNull(user0);
      assertEquals("Low", user0.getLast_name());
      assertEquals((-2573L), (long)user0.getId());
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("B~|kG48sNB9k", user0.getFirst_name());
      assertNull(user0.getStripeId());
      assertEquals("B~|kG48sNB9k", user0.getPassword());
      assertNull(user0.getEmail());
      
      UserService userService1 = new UserService();
      assertFalse(userService1.equals((Object)userService0));
      assertNotNull(userService1);
      
      JdbcTemplate jdbcTemplate1 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      Injector.inject(userService1, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate1);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      
      Injector.validateBean(userService1, (Class<?>) UserService.class);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService1);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      assertEquals("Low", user0.getLast_name());
      assertEquals((-2573L), (long)user0.getId());
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("B~|kG48sNB9k", user0.getFirst_name());
      assertNull(user0.getStripeId());
      assertEquals("B~|kG48sNB9k", user0.getPassword());
      assertNull(user0.getEmail());
      
      Injector.validateBean(user0, (Class<?>) User.class);
      assertEquals("Low", user0.getLast_name());
      assertEquals((-2573L), (long)user0.getId());
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("B~|kG48sNB9k", user0.getFirst_name());
      assertNull(user0.getStripeId());
      assertEquals("B~|kG48sNB9k", user0.getPassword());
      assertNull(user0.getEmail());
      
      boolean boolean0 = userService0.authenticate(user0);
      assertFalse(boolean0);
      assertFalse(userService0.equals((Object)userService1));
      assertNotSame(userService0, userService1);
      assertEquals("Low", user0.getLast_name());
      assertEquals((-2573L), (long)user0.getId());
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("B~|kG48sNB9k", user0.getFirst_name());
      assertNull(user0.getStripeId());
      assertEquals("B~|kG48sNB9k", user0.getPassword());
      assertNull(user0.getEmail());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UserService userService0 = new UserService();
      assertNotNull(userService0);
      
      UserSettings userSettings0 = new UserSettings();
      assertNotNull(userSettings0);
      assertNull(userSettings0.getBikePreference());
      assertFalse(userSettings0.isCarAvailability());
      assertEquals(0, userSettings0.getMaxWalkingDistance());
      assertFalse(userSettings0.isBikeAvailability());
      assertNull(userSettings0.getCarPreference());
      assertFalse(userSettings0.isDrivingLicense());
      
      JdbcTemplate jdbcTemplate0 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn(userSettings0).when(jdbcTemplate0).queryForObject(anyString() , any(java.lang.Object[].class) , any(java.lang.Class.class));
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      assertNull(userSettings0.getBikePreference());
      assertFalse(userSettings0.isCarAvailability());
      assertEquals(0, userSettings0.getMaxWalkingDistance());
      assertFalse(userSettings0.isBikeAvailability());
      assertNull(userSettings0.getCarPreference());
      assertFalse(userSettings0.isDrivingLicense());
      
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      boolean boolean0 = userService0.check("getState()");
      assertFalse(boolean0);
      
      UserService userService1 = new UserService();
      assertFalse(userService1.equals((Object)userService0));
      assertNotNull(userService1);
      
      JdbcTemplate jdbcTemplate1 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn("getState()").when(jdbcTemplate1).queryForObject(anyString() , any(java.lang.Object[].class) , any(java.lang.Class.class));
      doReturn(userService0).when(jdbcTemplate1).queryForObject(anyString() , any(java.lang.Object[].class) , any(org.springframework.jdbc.core.RowMapper.class));
      doReturn((-1326)).when(jdbcTemplate1).update(anyString() , any(java.lang.Object[].class));
      Injector.inject(userService1, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate1);
      assertFalse(userService0.equals((Object)userService1));
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService0, userService1);
      assertNotSame(userService1, userService0);
      
      Injector.validateBean(userService1, (Class<?>) UserService.class);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      
      User user0 = new User("getState()", "`;zqr");
      assertNotNull(user0);
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("getState()", user0.getEmail());
      assertEquals("", user0.getFirst_name());
      assertEquals("", user0.getLast_name());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("", user0.getStripeId());
      assertEquals("`;zqr", user0.getPassword());
      
      UserService userService2 = new UserService();
      assertFalse(userService2.equals((Object)userService1));
      assertFalse(userService2.equals((Object)userService0));
      assertNotNull(userService2);
      
      JdbcTemplate jdbcTemplate2 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      Injector.inject(userService2, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate2);
      assertFalse(userService2.equals((Object)userService1));
      assertFalse(userService2.equals((Object)userService0));
      assertNotSame(userService2, userService1);
      assertNotSame(userService2, userService0);
      
      Injector.validateBean(userService2, (Class<?>) UserService.class);
      assertFalse(userService2.equals((Object)userService1));
      assertFalse(userService2.equals((Object)userService0));
      assertNotSame(userService2, userService1);
      assertNotSame(userService2, userService0);
      
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService2);
      assertFalse(userService2.equals((Object)userService1));
      assertFalse(userService2.equals((Object)userService0));
      assertNotSame(userService2, userService1);
      assertNotSame(userService2, userService0);
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("getState()", user0.getEmail());
      assertEquals("", user0.getFirst_name());
      assertEquals("", user0.getLast_name());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("", user0.getStripeId());
      assertEquals("`;zqr", user0.getPassword());
      
      Injector.validateBean(user0, (Class<?>) User.class);
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("getState()", user0.getEmail());
      assertEquals("", user0.getFirst_name());
      assertEquals("", user0.getLast_name());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("", user0.getStripeId());
      assertEquals("`;zqr", user0.getPassword());
      
      userService1.addUser(user0);
      assertFalse(userService1.equals((Object)userService2));
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService2);
      assertNotSame(userService1, userService0);
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("getState()", user0.getEmail());
      assertEquals("", user0.getFirst_name());
      assertEquals("", user0.getLast_name());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("", user0.getStripeId());
      assertEquals("`;zqr", user0.getPassword());
      
      boolean boolean1 = userService1.check("getState()");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(userService1.equals((Object)userService2));
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService2);
      assertNotSame(userService1, userService0);
      
      Long long0 = new Long(875L);
      assertEquals(875L, (long)long0);
      assertNotNull(long0);
      
      // Undeclared exception!
      try { 
        userService1.getPreferences(long0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.polimi.travlendar.backend.beans.UserService cannot be cast to com.polimi.travlendar.backend.model.user.UserSettings
         //
         verifyException("com.polimi.travlendar.backend.beans.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UserService userService0 = new UserService();
      assertNotNull(userService0);
      
      Integer integer0 = new Integer((-5087));
      assertEquals((-5087), (int)integer0);
      assertNotNull(integer0);
      
      JdbcTemplate jdbcTemplate0 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(jdbcTemplate0).queryForObject(anyString() , any(java.lang.Object[].class) , any(org.springframework.jdbc.core.RowMapper.class));
      doReturn((-5087)).when(jdbcTemplate0).update(anyString() , any(java.lang.Object[].class));
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      User user0 = new User("", "Executing prepared SQL query");
      assertNotNull(user0);
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("Executing prepared SQL query", user0.getPassword());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("", user0.getStripeId());
      assertEquals("", user0.getEmail());
      assertEquals("", user0.getFirst_name());
      assertEquals("", user0.getLast_name());
      
      UserService userService1 = new UserService();
      assertFalse(userService1.equals((Object)userService0));
      assertNotNull(userService1);
      
      JdbcTemplate jdbcTemplate1 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      Injector.inject(userService1, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate1);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      
      Injector.validateBean(userService1, (Class<?>) UserService.class);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService1);
      assertFalse(userService1.equals((Object)userService0));
      assertNotSame(userService1, userService0);
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("Executing prepared SQL query", user0.getPassword());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("", user0.getStripeId());
      assertEquals("", user0.getEmail());
      assertEquals("", user0.getFirst_name());
      assertEquals("", user0.getLast_name());
      
      Injector.validateBean(user0, (Class<?>) User.class);
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("Executing prepared SQL query", user0.getPassword());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("", user0.getStripeId());
      assertEquals("", user0.getEmail());
      assertEquals("", user0.getFirst_name());
      assertEquals("", user0.getLast_name());
      
      userService0.updateUser(user0);
      assertFalse(userService0.equals((Object)userService1));
      assertNotSame(userService0, userService1);
      assertEquals(0L, (long)user0.getBalance());
      assertEquals("Executing prepared SQL query", user0.getPassword());
      assertEquals((-1L), (long)user0.getId());
      assertEquals("", user0.getStripeId());
      assertEquals("", user0.getEmail());
      assertEquals("", user0.getFirst_name());
      assertEquals("", user0.getLast_name());
      
      // Undeclared exception!
      try { 
        userService0.getUser("", (String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to com.polimi.travlendar.backend.model.user.User
         //
         verifyException("com.polimi.travlendar.backend.beans.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UserService userService0 = new UserService();
      assertNotNull(userService0);
      
      JdbcTemplate jdbcTemplate0 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn("9;Q(=}VP").when(jdbcTemplate0).queryForObject(anyString() , any(java.lang.Object[].class) , any(java.lang.Class.class));
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      // Undeclared exception!
      try { 
        userService0.addPreferences("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Long
         //
         verifyException("com.polimi.travlendar.backend.beans.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UserService userService0 = new UserService();
      assertNotNull(userService0);
      
      JdbcTemplate jdbcTemplate0 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(jdbcTemplate0).update(anyString() , any(java.lang.Object[].class));
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      PreferenceLevel preferenceLevel0 = PreferenceLevel.LOW;
      PreferenceLevel preferenceLevel1 = PreferenceLevel.HIGH;
      UserSettings userSettings0 = new UserSettings(preferenceLevel0, preferenceLevel1, 150, true, true, false);
      assertFalse(preferenceLevel0.equals((Object)preferenceLevel1));
      assertFalse(preferenceLevel1.equals((Object)preferenceLevel0));
      assertNotNull(userSettings0);
      assertTrue(userSettings0.isBikeAvailability());
      assertTrue(userSettings0.isCarAvailability());
      assertFalse(userSettings0.isDrivingLicense());
      assertEquals(150, userSettings0.getMaxWalkingDistance());
      assertEquals(PreferenceLevel.HIGH, userSettings0.getCarPreference());
      assertEquals(PreferenceLevel.LOW, userSettings0.getBikePreference());
      
      Long long0 = new Long((-1530L));
      assertEquals((-1530L), (long)long0);
      assertNotNull(long0);
      
      userService0.updatePreferences(userSettings0, long0);
      assertFalse(preferenceLevel0.equals((Object)preferenceLevel1));
      assertFalse(preferenceLevel1.equals((Object)preferenceLevel0));
      assertNotSame(preferenceLevel0, preferenceLevel1);
      assertNotSame(preferenceLevel1, preferenceLevel0);
      assertTrue(userSettings0.isBikeAvailability());
      assertTrue(userSettings0.isCarAvailability());
      assertFalse(userSettings0.isDrivingLicense());
      assertEquals(150, userSettings0.getMaxWalkingDistance());
      assertEquals(PreferenceLevel.HIGH, userSettings0.getCarPreference());
      assertEquals(PreferenceLevel.LOW, userSettings0.getBikePreference());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UserService userService0 = new UserService();
      assertNotNull(userService0);
      
      JdbcTemplate jdbcTemplate0 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      // Undeclared exception!
      try { 
        userService0.updateUser((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.travlendar.backend.beans.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UserService userService0 = new UserService();
      JdbcTemplate jdbcTemplate0 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jdbcTemplate0).queryForObject(anyString() , any(java.lang.Object[].class) , any(org.springframework.jdbc.core.RowMapper.class));
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      userService0.getUser("", "");
      // Undeclared exception!
      try { 
        userService0.addUser((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.travlendar.backend.beans.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UserService userService0 = new UserService();
      JdbcTemplate jdbcTemplate0 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jdbcTemplate0).queryForObject(anyString() , any(java.lang.Object[].class) , any(org.springframework.jdbc.core.RowMapper.class));
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      userService0.getUser("b; hBC~q`>':5k`", "b; hBC~q`>':5k`");
      // Undeclared exception!
      try { 
        userService0.authenticate((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.travlendar.backend.beans.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UserService userService0 = new UserService();
      JdbcTemplate jdbcTemplate0 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn("B~|kG48sNB9k", (Object) null).when(jdbcTemplate0).queryForObject(anyString() , any(java.lang.Object[].class) , any(java.lang.Class.class));
      doReturn(0).when(jdbcTemplate0).update(anyString() , any(java.lang.Object[].class));
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Long long0 = new Long(0L);
      User user0 = new User(long0, "B~|kG48sNB9k", "B~|kG48sNB9k", "|k=*gY,2iO_", "/f6p.`QeI_H");
      Long.toUnsignedString((-2062L));
      JdbcTemplate jdbcTemplate1 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      userService0.check("|k=*gY,2iO_");
      userService0.addUser(user0);
      // Undeclared exception!
      try { 
        userService0.authenticate(user0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UserService userService0 = new UserService();
      JdbcTemplate jdbcTemplate0 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jdbcTemplate0).queryForObject(anyString() , any(java.lang.Object[].class) , any(java.lang.Class.class));
      doReturn((Object) null, (Object) null).when(jdbcTemplate0).queryForObject(anyString() , any(java.lang.Object[].class) , any(org.springframework.jdbc.core.RowMapper.class));
      doReturn(0, 0).when(jdbcTemplate0).update(anyString() , any(java.lang.Object[].class));
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      User user0 = new User((String) null, (String) null, (String) null, (String) null);
      UserService userService1 = new UserService();
      JdbcTemplate jdbcTemplate1 = mock(JdbcTemplate.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jdbcTemplate1).queryForObject(anyString() , any(java.lang.Object[].class) , any(java.lang.Class.class));
      doReturn((Object) null).when(jdbcTemplate1).queryForObject(anyString() , any(java.lang.Object[].class) , any(org.springframework.jdbc.core.RowMapper.class));
      doReturn(0).when(jdbcTemplate1).update(anyString() , any(java.lang.Object[].class));
      Injector.inject(userService1, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate1);
      Injector.validateBean(userService1, (Class<?>) UserService.class);
      Long long0 = new Long((-1L));
      userService1.getPreferences(long0);
      userService1.addPreferences((String) null);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService1);
      Injector.validateBean(user0, (Class<?>) User.class);
      userService0.updateUser(user0);
      userService0.addPreferences("SELECT id FROM users WHERE email=?");
      userService0.getUser("SELECT id FROM users WHERE email=?", "2l!");
      userService0.getUser("INSERT INTO users (email, password, first_name, last_name,balance,stripeId) VALUES (?, ?, ?, ?,?,?)", (String) null);
      Long long1 = new Long(1730L);
      // Undeclared exception!
      try { 
        userService0.updatePreferences((UserSettings) null, long1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.travlendar.backend.beans.UserService", e);
      }
  }
}
