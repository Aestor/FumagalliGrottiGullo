/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 05 22:04:12 GMT 2018
 */

package com.polimi.travlendar.backend.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mysql.fabric.jdbc.FabricMySQLDataSource;
import com.mysql.jdbc.Driver;
import com.mysql.jdbc.NonRegisteringDriver;
import com.polimi.travlendar.backend.beans.StripeService;
import com.polimi.travlendar.backend.beans.UserService;
import com.polimi.travlendar.backend.model.user.User;
import com.polimi.travlendar.payment.checkout.ChargeRequest;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DelegatingDataSource;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter;
import org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy;
import org.springframework.jdbc.datasource.SimpleDriverDataSource;
import org.springframework.jdbc.datasource.SingleConnectionDataSource;
import org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy;
import org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StripeService_ESTest extends StripeService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StripeService stripeService0 = new StripeService();
      stripeService0.init();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StripeService stripeService0 = new StripeService();
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource("s!BJ?");
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(driverManagerDataSource0);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User("s!BJ?", "s!BJ?", "s!BJ?", "s!BJ?");
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "user", (Object) user0);
      Injector.validateBean(stripeService0, (Class<?>) StripeService.class);
      Injector.executePostConstruct((Object) stripeService0, (Class<?>) StripeService.class);
      Long long0 = new Long((-635L));
      // Undeclared exception!
      try { 
        stripeService0.updateBalance(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get JDBC Connection; nested exception is java.sql.SQLException: No suitable driver found for s!BJ?
         //
         verifyException("org.springframework.jdbc.datasource.DataSourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StripeService stripeService0 = new StripeService();
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        stripeService0.updateBalance(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.travlendar.backend.beans.StripeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StripeService stripeService0 = new StripeService();
      NonRegisteringDriver nonRegisteringDriver0 = new NonRegisteringDriver();
      SimpleDriverDataSource simpleDriverDataSource0 = new SimpleDriverDataSource(nonRegisteringDriver0, "Linux");
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(simpleDriverDataSource0);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User("jdbc:mysql:loadbalance://", "HOST");
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "user", (Object) user0);
      Injector.validateBean(stripeService0, (Class<?>) StripeService.class);
      Injector.executePostConstruct((Object) stripeService0, (Class<?>) StripeService.class);
      Long long0 = new Long(1);
      // Undeclared exception!
      try { 
        stripeService0.updateBalance(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.jdbc.core.JdbcTemplate$SimplePreparedStatementCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StripeService stripeService0 = new StripeService();
      TransactionAwareDataSourceProxy transactionAwareDataSourceProxy0 = new TransactionAwareDataSourceProxy();
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(transactionAwareDataSourceProxy0, true);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User("|F=qtj&", "|F=qtj&");
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "user", (Object) user0);
      Injector.validateBean(stripeService0, (Class<?>) StripeService.class);
      Injector.executePostConstruct((Object) stripeService0, (Class<?>) StripeService.class);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        stripeService0.updateBalance(long0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 'targetDataSource' is required
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StripeService stripeService0 = new StripeService();
      SingleConnectionDataSource singleConnectionDataSource0 = new SingleConnectionDataSource("f;{6733nR", "f;{6733nR", "", true);
      LazyConnectionDataSourceProxy lazyConnectionDataSourceProxy0 = new LazyConnectionDataSourceProxy(singleConnectionDataSource0);
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(lazyConnectionDataSourceProxy0, true);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User("", "d_N?!E");
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "user", (Object) user0);
      Injector.validateBean(stripeService0, (Class<?>) StripeService.class);
      Injector.executePostConstruct((Object) stripeService0, (Class<?>) StripeService.class);
      // Undeclared exception!
      try { 
        stripeService0.stripeInit("^q%$@^m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // PreparedStatementCallback; SQL [UPDATE users SET stripeId = ? WHERE email= ?]; No suitable driver found for f;{6733nR; nested exception is java.sql.SQLException: No suitable driver found for f;{6733nR
         //
         verifyException("org.springframework.jdbc.support.SQLStateSQLExceptionTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StripeService stripeService0 = new StripeService();
      FabricMySQLDataSource fabricMySQLDataSource0 = new FabricMySQLDataSource();
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(fabricMySQLDataSource0);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User();
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "user", (Object) user0);
      Injector.validateBean(stripeService0, (Class<?>) StripeService.class);
      Injector.executePostConstruct((Object) stripeService0, (Class<?>) StripeService.class);
      // Undeclared exception!
      try { 
        stripeService0.stripeInit("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StripeService stripeService0 = new StripeService();
      LazyConnectionDataSourceProxy lazyConnectionDataSourceProxy0 = new LazyConnectionDataSourceProxy();
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(lazyConnectionDataSourceProxy0);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Long long0 = new Long((-1844L));
      User user0 = new User(long0, (String) null, "", "UPDATE users SET stripeId = ? WHERE email= ?", (String) null);
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "user", (Object) user0);
      Injector.validateBean(stripeService0, (Class<?>) StripeService.class);
      Injector.executePostConstruct((Object) stripeService0, (Class<?>) StripeService.class);
      // Undeclared exception!
      try { 
        stripeService0.stripeInit("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy$LazyConnectionInvocationHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StripeService stripeService0 = new StripeService();
      IsolationLevelDataSourceAdapter isolationLevelDataSourceAdapter0 = new IsolationLevelDataSourceAdapter();
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(isolationLevelDataSourceAdapter0, true);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User("", (String) null);
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "user", (Object) user0);
      Injector.validateBean(stripeService0, (Class<?>) StripeService.class);
      Injector.executePostConstruct((Object) stripeService0, (Class<?>) StripeService.class);
      // Undeclared exception!
      try { 
        stripeService0.stripeInit((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 'targetDataSource' is required
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StripeService stripeService0 = new StripeService();
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate();
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Long long0 = new Long((-1L));
      User user0 = new User(long0, "@VP*#4m", "Bl7[>)", "~@=kSm2f*)#F", "@VP*#4m");
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "user", (Object) user0);
      Injector.validateBean(stripeService0, (Class<?>) StripeService.class);
      Injector.executePostConstruct((Object) stripeService0, (Class<?>) StripeService.class);
      // Undeclared exception!
      try { 
        stripeService0.stripeInit("//SA^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No DataSource specified
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StripeService stripeService0 = new StripeService();
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource();
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(driverManagerDataSource0);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User();
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "user", (Object) user0);
      Injector.validateBean(stripeService0, (Class<?>) StripeService.class);
      Injector.executePostConstruct((Object) stripeService0, (Class<?>) StripeService.class);
      // Undeclared exception!
      try { 
        stripeService0.getBalance();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get JDBC Connection; nested exception is java.sql.SQLException: The url cannot be null
         //
         verifyException("org.springframework.jdbc.datasource.DataSourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StripeService stripeService0 = new StripeService();
      Driver driver0 = new Driver();
      SimpleDriverDataSource simpleDriverDataSource0 = new SimpleDriverDataSource(driver0, "1.8.0_131", (Properties) null);
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(simpleDriverDataSource0);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User();
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "user", (Object) user0);
      Injector.validateBean(stripeService0, (Class<?>) StripeService.class);
      Injector.executePostConstruct((Object) stripeService0, (Class<?>) StripeService.class);
      // Undeclared exception!
      try { 
        stripeService0.getBalance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.jdbc.core.JdbcTemplate$SimplePreparedStatementCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StripeService stripeService0 = new StripeService();
      TransactionAwareDataSourceProxy transactionAwareDataSourceProxy0 = new TransactionAwareDataSourceProxy();
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(transactionAwareDataSourceProxy0);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Long long0 = new Long(2149L);
      User user0 = new User(long0, "SELECT balance FROM users WHERE email = ?", "", "", "");
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "user", (Object) user0);
      Injector.validateBean(stripeService0, (Class<?>) StripeService.class);
      Injector.executePostConstruct((Object) stripeService0, (Class<?>) StripeService.class);
      // Undeclared exception!
      try { 
        stripeService0.getBalance();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 'targetDataSource' is required
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StripeService stripeService0 = new StripeService();
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate();
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User("apdTR;i:", "apdTR;i:", "apdTR;i:", "<8HYgLP");
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "user", (Object) user0);
      Injector.validateBean(stripeService0, (Class<?>) StripeService.class);
      Injector.executePostConstruct((Object) stripeService0, (Class<?>) StripeService.class);
      // Undeclared exception!
      try { 
        stripeService0.getBalance();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No DataSource specified
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StripeService stripeService0 = new StripeService();
      SingleConnectionDataSource singleConnectionDataSource0 = new SingleConnectionDataSource("email", "email", (String) null, false);
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(singleConnectionDataSource0);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User("usd", "email", "[C;ZX-|", "cHAg ,[");
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "user", (Object) user0);
      Injector.validateBean(stripeService0, (Class<?>) StripeService.class);
      Injector.executePostConstruct((Object) stripeService0, (Class<?>) StripeService.class);
      ChargeRequest chargeRequest0 = new ChargeRequest();
      // Undeclared exception!
      try { 
        stripeService0.charge(chargeRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get JDBC Connection; nested exception is java.sql.SQLException: No suitable driver found for email
         //
         verifyException("org.springframework.jdbc.datasource.DataSourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StripeService stripeService0 = new StripeService();
      NonRegisteringDriver nonRegisteringDriver0 = new NonRegisteringDriver();
      SimpleDriverDataSource simpleDriverDataSource0 = new SimpleDriverDataSource(nonRegisteringDriver0, "NUM_HOSTS", "email", "nai2T?$D`@eyikd>");
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(simpleDriverDataSource0, false);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User((Long) null, "Oracle Corporation", "email", "MySQL Connector Java", "DBNAME");
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "user", (Object) user0);
      Injector.validateBean(stripeService0, (Class<?>) StripeService.class);
      Injector.executePostConstruct((Object) stripeService0, (Class<?>) StripeService.class);
      // Undeclared exception!
      try { 
        stripeService0.charge((ChargeRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.polimi.travlendar.backend.beans.StripeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StripeService stripeService0 = new StripeService();
      LazyConnectionDataSourceProxy lazyConnectionDataSourceProxy0 = new LazyConnectionDataSourceProxy();
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(lazyConnectionDataSourceProxy0, true);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User();
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "user", (Object) user0);
      Injector.validateBean(stripeService0, (Class<?>) StripeService.class);
      Injector.executePostConstruct((Object) stripeService0, (Class<?>) StripeService.class);
      ChargeRequest chargeRequest0 = new ChargeRequest();
      // Undeclared exception!
      try { 
        stripeService0.charge(chargeRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy$LazyConnectionInvocationHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StripeService stripeService0 = new StripeService();
      UserCredentialsDataSourceAdapter userCredentialsDataSourceAdapter0 = new UserCredentialsDataSourceAdapter();
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(userCredentialsDataSourceAdapter0, true);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User("", "", "", "L8^(&");
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "user", (Object) user0);
      Injector.validateBean(stripeService0, (Class<?>) StripeService.class);
      Injector.executePostConstruct((Object) stripeService0, (Class<?>) StripeService.class);
      ChargeRequest chargeRequest0 = new ChargeRequest();
      // Undeclared exception!
      try { 
        stripeService0.charge(chargeRequest0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 'targetDataSource' is required
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StripeService stripeService0 = new StripeService();
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate();
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User("+f", "wDjg8=~Y#dg#`BQ", "", "+f");
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "user", (Object) user0);
      Injector.validateBean(stripeService0, (Class<?>) StripeService.class);
      Injector.executePostConstruct((Object) stripeService0, (Class<?>) StripeService.class);
      ChargeRequest chargeRequest0 = new ChargeRequest();
      // Undeclared exception!
      try { 
        stripeService0.charge(chargeRequest0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No DataSource specified
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StripeService stripeService0 = new StripeService();
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource("sk_test_RuQWeP6fRFKs0DbXl8tSkCEi", "", "sk_test_RuQWeP6fRFKs0DbXl8tSkCEi");
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(driverManagerDataSource0, true);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User("Er-gr=(xef", "sk_test_RuQWeP6fRFKs0DbXl8tSkCEi");
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "user", (Object) user0);
      Injector.validateBean(stripeService0, (Class<?>) StripeService.class);
      Injector.executePostConstruct((Object) stripeService0, (Class<?>) StripeService.class);
      // Undeclared exception!
      try { 
        stripeService0.stripeInit("fKSs>L9y(wqXmUuz#X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get JDBC Connection; nested exception is java.sql.SQLException: No suitable driver found for sk_test_RuQWeP6fRFKs0DbXl8tSkCEi
         //
         verifyException("org.springframework.jdbc.datasource.DataSourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StripeService stripeService0 = new StripeService();
      DelegatingDataSource delegatingDataSource0 = new DelegatingDataSource();
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate(delegatingDataSource0, true);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User("C2feETyhj!", "C2feETyhj!", "C2feETyhj!", "");
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "user", (Object) user0);
      Injector.validateBean(stripeService0, (Class<?>) StripeService.class);
      Injector.executePostConstruct((Object) stripeService0, (Class<?>) StripeService.class);
      // Undeclared exception!
      try { 
        stripeService0.getBalance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.jdbc.datasource.DelegatingDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StripeService stripeService0 = new StripeService();
      JdbcTemplate jdbcTemplate0 = new JdbcTemplate();
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      User user0 = new User("a&mW@z* Ii|6&Q/K?C", "a&mW@z* Ii|6&Q/K?C", "qR", "qR");
      UserService userService0 = new UserService();
      Injector.inject(userService0, (Class<?>) UserService.class, "jdbcTemplate", (Object) jdbcTemplate0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(user0, (Class<?>) User.class, "service", (Object) userService0);
      Injector.validateBean(user0, (Class<?>) User.class);
      Injector.inject(stripeService0, (Class<?>) StripeService.class, "user", (Object) user0);
      Injector.validateBean(stripeService0, (Class<?>) StripeService.class);
      Injector.executePostConstruct((Object) stripeService0, (Class<?>) StripeService.class);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        stripeService0.updateBalance(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No DataSource specified
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }
}
