/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 05 22:17:09 GMT 2018
 */

package com.polimi.travlendar.frontend.ui.pages;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import com.polimi.travlendar.backend.beans.EventService;
import com.polimi.travlendar.frontend.ui.forms.EventForm;
import com.polimi.travlendar.frontend.ui.pages.CreateEventPage;
import com.vaadin.navigator.ViewChangeListener;
import com.vaadin.ui.HasComponents;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CreateEventPage_ESTest extends CreateEventPage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CreateEventPage createEventPage0 = new CreateEventPage();
      EventForm eventForm0 = mock(EventForm.class, new ViolatedAssumptionAnswer());
      doReturn((HasComponents) null).when(eventForm0).getParent();
      Injector.inject(createEventPage0, (Class<?>) CreateEventPage.class, "createEvent", (Object) eventForm0);
      EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
      Injector.inject(createEventPage0, (Class<?>) CreateEventPage.class, "service", (Object) eventService0);
      Injector.validateBean(createEventPage0, (Class<?>) CreateEventPage.class);
      ViewChangeListener.ViewChangeEvent viewChangeListener_ViewChangeEvent0 = mock(ViewChangeListener.ViewChangeEvent.class, new ViolatedAssumptionAnswer());
      createEventPage0.enter(viewChangeListener_ViewChangeEvent0);
      assertTrue(createEventPage0.isVisible());
  }
}
