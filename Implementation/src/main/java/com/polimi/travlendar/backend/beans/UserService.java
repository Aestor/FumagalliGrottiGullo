package com.polimi.travlendar.backend.beans;

import com.polimi.travlendar.backend.model.user.User;
import com.polimi.travlendar.backend.database.UserRowMapper;
import com.polimi.travlendar.backend.database.UserSettingsRowMapper;
import com.polimi.travlendar.backend.model.user.UserSettings;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;

import com.vaadin.spring.annotation.SpringComponent;
import com.vaadin.spring.annotation.VaadinSessionScope;

/**
 * This class handles SQL queries to the database concerning the object "User".
 *
 * @author Emmeggi95
 * @author jaycaves
 *
 */
@SpringComponent
@VaadinSessionScope
@Scope("session")
public class UserService {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    /**
     * Checks if the String passed as a parameter is already present in the
     * database as an email.
     *
     * @param email
     * @return
     */
    public boolean check(String email) {
        try {
            jdbcTemplate.queryForObject("SELECT id FROM users WHERE email=?", new Object[]{email}, Long.class);
        } catch (EmptyResultDataAccessException e) {
            return true;
        }
        return false;

    }

    /**
     * Adds a user in the database with the information stored by the User
     * object passed as a parameter. The user's id is automatically generated by
     * the database.
     *
     * @param user
     */
    public void addUser(User user) {
        jdbcTemplate.update("INSERT INTO users (email, password, first_name, last_name,balance,stripeId) VALUES (?, ?, ?, ?,?,?)",
                user.getEmail(), user.getPassword(), user.getFirst_name(), user.getLast_name(), new Long(0), "none");
    }

    public boolean authenticate(User user) throws EmptyResultDataAccessException {
        String password;
        try {
            password = jdbcTemplate.queryForObject("SELECT password FROM users WHERE email=?", new Object[]{user.getEmail()}, String.class);
        } catch (EmptyResultDataAccessException e) {
            throw e;
        }
        return password.equals(user.getPassword());

    }

    /**
     * Returns every information about the user stored in the database with
     * corresponding email and password.
     *
     * @param email
     * @param password
     * @return
     * @throws EmptyResultDataAccessException
     */
    public User getUser(String email, String password) throws EmptyResultDataAccessException {
        User result;
        try {
            result = (User) jdbcTemplate.queryForObject("SELECT * FROM users WHERE email=? AND password=?", new Object[]{email, password}, new UserRowMapper());
        } catch (EmptyResultDataAccessException e) {
            throw e;
        }
        return result;
    }

    public void updateUser(User user) {
        jdbcTemplate.update("UPDATE users SET first_name=?, last_name=?, password=?  WHERE id= ?",
                user.getFirst_name(), user.getLast_name(), user.getPassword(), user.getId());

    }

    /**
     * It is called when a new user is registered
     *
     * @param email
     */
    public void addPreferences(String email) {

        //Save default values for a new registered user
        Long id = jdbcTemplate.queryForObject("SELECT id FROM users WHERE email=?", new Object[]{email}, Long.class);
        jdbcTemplate.update("INSERT INTO user_settings (id, car_preference_level, bike_preference_level, bike_availability, car_availability,driver_licence, max_walk_distance) VALUES (?,?, ?, ?, ?,?,?)",
                id, "Low", "Low", false, false, false, 999);
    }

    /**
     * Update user's preferences.
     *
     * @param newSettings
     */
    public void updatePreferences(UserSettings newSettings, Long userId) {

        jdbcTemplate.update("UPDATE user_settings SET  car_preference_level= ?, bike_preference_level= ?, bike_availability= ?, car_availability= ?,driver_licence= ?, max_walk_distance= ? WHERE id= ?",
                newSettings.getCarPreference().getPreference(), newSettings.getBikePreference().getPreference(),
                newSettings.isBikeAvailability(), newSettings.isCarAvailability(),
                newSettings.isDrivingLicense(), newSettings.getMaxWalkingDistance(), userId);

    }

    /**
     * Fetches user's preferences.
     *
     * @param userId
     * @return
     */
    public UserSettings getPreferences(Long userId) {
        UserSettings settings;
        settings = (UserSettings) jdbcTemplate.queryForObject("SELECT * FROM user_settings WHERE id =? ", new Object[]{userId}, new UserSettingsRowMapper());
        return settings;
    }

}
